.TH "Region" 3 "Thu Apr 11 2013" "Version v0.1" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Region \- 
.PP
The region class represents a region in 2D space\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'src/pinspec/Region\&.h'\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegion\fP (char *region_name, \fBregionType\fP type)"
.br
.RI "\fI\fBRegion\fP constructor\&. \fP"
.ti -1c
.RI "virtual \fB~Region\fP ()"
.br
.RI "\fI\fBRegion\fP destructor\&. \fP"
.ti -1c
.RI "char * \fBgetRegionName\fP ()"
.br
.RI "\fIReturn the name of the region\&. \fP"
.ti -1c
.RI "float \fBgetVolume\fP ()"
.br
.RI "\fIreturns the volume of this \fBRegion\fP $ (cm^3) $\&. \fP"
.ti -1c
.RI "\fBMaterial\fP * \fBgetMaterial\fP ()"
.br
.RI "\fIReturns a pointer to the material filling this region\&. \fP"
.ti -1c
.RI "bool \fBcontainsIsotope\fP (\fBIsotope\fP *isotope)"
.br
.RI "\fIDetermines whether this region contains a particular isotope\&. \fP"
.ti -1c
.RI "\fBregionType\fP \fBgetRegionType\fP ()"
.br
.RI "\fIReturn the type of region\&. \fP"
.ti -1c
.RI "bool \fBisFuel\fP ()"
.br
.RI "\fIReturns true if this region is the fuel, false otherwise\&. \fP"
.ti -1c
.RI "bool \fBisModerator\fP ()"
.br
.RI "\fIReturns true if this region is the moderator, false otherwise\&. \fP"
.ti -1c
.RI "bool \fBisInfinite\fP ()"
.br
.RI "\fIReturns true if this region is an infnite medium, false otherwise\&. \fP"
.ti -1c
.RI "float \fBgetFuelRadius\fP ()"
.br
.RI "\fIReturns the fuel pin radius if not an INFINITE region type\&. \fP"
.ti -1c
.RI "float \fBgetPitch\fP ()"
.br
.RI "\fIReturns the pin cell pitch if not an INFINITE region type\&. \fP"
.ti -1c
.RI "float \fBgetBucklingSquared\fP ()"
.br
.RI "\fIReturns the squared geometric buckling\&. \fP"
.ti -1c
.RI "float \fBgetTotalMacroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the total macroscopic cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetTotalMacroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the total macroscopic cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetTotalMicroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the total microscopic cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetTotalMicroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the total microscopic cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetElasticMacroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the macroscopic elastic scattering cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetElasticMacroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the macroscopic elastic scattering cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetElasticMicroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the microscopic elastic scattering cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetElasticMicroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the microscopic elastic scattering cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMacroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the macroscopic absorption cross-section in the region at energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMacroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the macroscopic absorption cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMicroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the microscopic absorption cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMicroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the microscopic absorption cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetCaptureMacroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the macroscopic capture cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetCaptureMacroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the macroscopic capture cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetCaptureMicroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the microscopic capture cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetCaptureMicroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the microscopic capture cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetFissionMacroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the macroscopic fission cross-section in the region at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetFissionMacroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the macroscopic fission cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetFissionMicroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the microscopic fission cross-section in the region at some energy (eV) \fP"
.ti -1c
.RI "float \fBgetFissionMicroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the microscopic fission cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetTransportMicroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the microscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetTransportMicroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the microscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetTransportMacroXS\fP (float energy)"
.br
.RI "\fIComputes and returns the macroscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetTransportMacroXS\fP (int energy_index)"
.br
.RI "\fIComputes and returns the macroscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "void \fBsetMaterial\fP (\fBMaterial\fP *material)"
.br
.RI "\fISet the material filling this region\&. \fP"
.ti -1c
.RI "void \fBsetFuelRadius\fP (float radius)"
.br
.RI "\fISets the fuel radius if the region is not of INFINITE type\&. \fP"
.ti -1c
.RI "void \fBsetPitch\fP (float pitch)"
.br
.RI "\fISets the pin cell pitch if the region is not of INFINITE type\&. \fP"
.ti -1c
.RI "void \fBsetVolume\fP (float volume)"
.br
.RI "\fISets the volume for this region $ (cm^3) $\&. \fP"
.ti -1c
.RI "void \fBsetBucklingSquared\fP (float buckling_squared)"
.br
.RI "\fISets the squared geometric buckling for the geometry\&. \fP"
.ti -1c
.RI "void \fBcollideNeutron\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fIThis method collides a neutron within the region\&. \fP"
.ti -1c
.RI "bool \fBcontains\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fICheck if this region contains a neutron at some 2D location\&. \fP"
.ti -1c
.RI "bool \fBonBoundary\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fIChecks if a neutron at some 2D location is on the region boundary\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char * \fB_region_name\fP"
.br
.ti -1c
.RI "float \fB_volume\fP"
.br
.ti -1c
.RI "\fBMaterial\fP * \fB_material\fP"
.br
.ti -1c
.RI "\fBregionType\fP \fB_region_type\fP"
.br
.ti -1c
.RI "float \fB_fuel_radius\fP"
.br
.ti -1c
.RI "float \fB_pitch\fP"
.br
.ti -1c
.RI "float \fB_half_width\fP"
.br
.ti -1c
.RI "float \fB_buckling_squared\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The region class represents a region in 2D space\&. 

The region class is a superclass allowing for subclasses representing infinited media, heterogeneous/homogeneous equivalance fuel/moderator regions, or even heterogeneous regions bounded by 2D quadratic surfaces, filled by a material\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Region::Region (char *region_name, \fBregionType\fPtype)"

.PP
\fBRegion\fP constructor\&. Sets defaults for the geometric parameters to 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIregion_name\fP the name of the region 
.br
\fItype\fP the type region (INFINITE, FUEL, etc) 
.RE
.PP

.SS "Region::~Region ()\fC [virtual]\fP"

.PP
\fBRegion\fP destructor\&. The destructor does not delete anything since SWIG deals with garbage collection\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Region::collideNeutron (\fBneutron\fP *neutron)"

.PP
This method collides a neutron within the region\&. This method encapsulates all of the neutron scattering physics which is further encapsulated by the material and isotope classes\&. 
.PP
\fBParameters:\fP
.RS 4
\fIneutron\fP the neutron of interest 
.RE
.PP

.SS "bool Region::contains (\fBneutron\fP *neutron)"

.PP
Check if this region contains a neutron at some 2D location\&. \fBParameters:\fP
.RS 4
\fIneutron\fP the neutron of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
if contained (true), otherwise (false) 
.RE
.PP

.SS "bool Region::containsIsotope (\fBIsotope\fP *isotope)"

.PP
Determines whether this region contains a particular isotope\&. \fBParameters:\fP
.RS 4
\fIisotope\fP the isotope of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the region contains the isotope; otherwise false 
.RE
.PP

.SS "float Region::getAbsorptionMacroXS (floatenergy)"

.PP
Computes and returns the macroscopic absorption cross-section in the region at energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic absorpotion cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getAbsorptionMacroXS (intenergy_index)"

.PP
Computes and returns the macroscopic absorption cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic absorption cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getAbsorptionMicroXS (floatenergy)"

.PP
Computes and returns the microscopic absorption cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic absorption cross-section 
.RE
.PP

.SS "float Region::getAbsorptionMicroXS (intenergy_index)"

.PP
Computes and returns the microscopic absorption cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic absorption cross-section 
.RE
.PP

.SS "float Region::getBucklingSquared ()"

.PP
Returns the squared geometric buckling\&. \fBReturns:\fP
.RS 4
the geometric buckling squared 
.RE
.PP

.SS "float Region::getCaptureMacroXS (floatenergy)"

.PP
Computes and returns the macroscopic capture cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic capture cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getCaptureMacroXS (intenergy_index)"

.PP
Computes and returns the macroscopic capture cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic capture cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getCaptureMicroXS (floatenergy)"

.PP
Computes and returns the microscopic capture cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic capture cross-section 
.RE
.PP

.SS "float Region::getCaptureMicroXS (intenergy_index)"

.PP
Computes and returns the microscopic capture cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic capture cross-section 
.RE
.PP

.SS "float Region::getElasticMacroXS (floatenergy)"

.PP
Computes and returns the macroscopic elastic scattering cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic elastic scattering cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getElasticMacroXS (intenergy_index)"

.PP
Computes and returns the macroscopic elastic scattering cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getElasticMicroXS (floatenergy)"

.PP
Computes and returns the microscopic elastic scattering cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic elastic scattering cross-section 
.RE
.PP

.SS "float Region::getElasticMicroXS (intenergy_index)"

.PP
Computes and returns the microscopic elastic scattering cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic elastic scattering cross-section 
.RE
.PP

.SS "float Region::getFissionMacroXS (floatenergy)"

.PP
Computes and returns the macroscopic fission cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic fission cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getFissionMacroXS (intenergy_index)"

.PP
Computes and returns the macroscopic fission cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic capture cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getFissionMicroXS (floatenergy)"

.PP
Computes and returns the microscopic fission cross-section in the region at some energy (eV) \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic fission cross-section 
.RE
.PP

.SS "float Region::getFissionMicroXS (intenergy_index)"

.PP
Computes and returns the microscopic fission cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic fission cross-section 
.RE
.PP

.SS "float Region::getFuelRadius ()"

.PP
Returns the fuel pin radius if not an INFINITE region type\&. \fBReturns:\fP
.RS 4
the fuel pin radius 
.RE
.PP

.SS "\fBMaterial\fP * Region::getMaterial ()"

.PP
Returns a pointer to the material filling this region\&. \fBReturns:\fP
.RS 4
a pointer to the material filling the region 
.RE
.PP

.SS "float Region::getPitch ()"

.PP
Returns the pin cell pitch if not an INFINITE region type\&. \fBReturns:\fP
.RS 4
the pin cell pitch 
.RE
.PP

.SS "char * Region::getRegionName ()"

.PP
Return the name of the region\&. \fBReturns:\fP
.RS 4
a character array representing this region's name 
.RE
.PP

.SS "\fBregionType\fP Region::getRegionType ()"

.PP
Return the type of region\&. \fBReturns:\fP
.RS 4
the region type (INFINITE, FUEL, etc\&.) 
.RE
.PP

.SS "float Region::getTotalMacroXS (floatenergy)"

.PP
Computes and returns the total macroscopic cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getTotalMacroXS (intenergy_index)"

.PP
Computes and returns the total macroscopic cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Region::getTotalMicroXS (floatenergy)"

.PP
Computes and returns the total microscopic cross-section in the region at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic cross-section 
.RE
.PP

.SS "float Region::getTotalMicroXS (intenergy_index)"

.PP
Computes and returns the total microscopic cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic cross-section 
.RE
.PP

.SS "float Region::getTransportMacroXS (floatenergy)"

.PP
Computes and returns the macroscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic transport cross-section 
.RE
.PP

.SS "float Region::getTransportMacroXS (intenergy_index)"

.PP
Computes and returns the macroscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the macroscopic transport cross-section 
.RE
.PP

.SS "float Region::getTransportMicroXS (floatenergy)"

.PP
Computes and returns the microscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic transport cross-section 
.RE
.PP

.SS "float Region::getTransportMicroXS (intenergy_index)"

.PP
Computes and returns the microscopic transport cross-section in the region at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic transport cross-section 
.RE
.PP

.SS "float Region::getVolume ()"

.PP
returns the volume of this \fBRegion\fP $ (cm^3) $\&. \fBReturns:\fP
.RS 4
the region's volume 
.RE
.PP

.SS "bool Region::isFuel ()"

.PP
Returns true if this region is the fuel, false otherwise\&. \fBReturns:\fP
.RS 4
true if fuel, false otherwise 
.RE
.PP

.SS "bool Region::isInfinite ()"

.PP
Returns true if this region is an infnite medium, false otherwise\&. \fBReturns:\fP
.RS 4
true if infinite, false otherwise 
.RE
.PP

.SS "bool Region::isModerator ()"

.PP
Returns true if this region is the moderator, false otherwise\&. \fBReturns:\fP
.RS 4
true if moderator, false otherwise 
.RE
.PP

.SS "bool Region::onBoundary (\fBneutron\fP *neutron)"

.PP
Checks if a neutron at some 2D location is on the region boundary\&. \fBParameters:\fP
.RS 4
\fIneutron\fP the neutron of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
true if on the boundary, otherwise false 
.RE
.PP

.SS "void Region::setBucklingSquared (floatbuckling_squared)"

.PP
Sets the squared geometric buckling for the geometry\&. This method also sets the bucklking squared for the material filling it\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuckling_squared\fP the squared geometric buckling 
.RE
.PP

.SS "void Region::setFuelRadius (floatradius)"

.PP
Sets the fuel radius if the region is not of INFINITE type\&. \fBParameters:\fP
.RS 4
\fIradius\fP the fuel pin radius 
.RE
.PP

.SS "void Region::setMaterial (\fBMaterial\fP *material)"

.PP
Set the material filling this region\&. This method also increments the volume for the material by the volume occuppied by the region\&. 
.PP
\fBParameters:\fP
.RS 4
\fImaterial\fP a pointer to a material 
.RE
.PP

.SS "void Region::setPitch (floatpitch)"

.PP
Sets the pin cell pitch if the region is not of INFINITE type\&. \fBParameters:\fP
.RS 4
\fIpitch\fP the pin cell pitch 
.RE
.PP

.SS "void Region::setVolume (floatvolume)"

.PP
Sets the volume for this region $ (cm^3) $\&. \fBParameters:\fP
.RS 4
\fIvolume\fP the volume occuppied by this region 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "float Region::_buckling_squared\fC [private]\fP"
The squared geometric buckling 
.SS "float Region::_fuel_radius\fC [private]\fP"
The radius of the fuel 
.SS "float Region::_half_width\fC [private]\fP"
Half of the pin cell pitch 
.SS "\fBMaterial\fP* Region::_material\fC [private]\fP"
A pointer to the material filling the region 
.SS "float Region::_pitch\fC [private]\fP"
The pin cell pitch 
.SS "char* Region::_region_name\fC [private]\fP"
The region's name 
.SS "\fBregionType\fP Region::_region_type\fC [private]\fP"
The type of region (INFINITE, MODERATOR, FUEL, etc\&.) 
.SS "float Region::_volume\fC [private]\fP"
The volume occupied by the region in 2D space 

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
