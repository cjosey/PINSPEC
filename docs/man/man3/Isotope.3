.TH "Isotope" 3 "Thu Apr 11 2013" "Version v0.1" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Isotope \- 
.PP
The \fBIsotope\fP represents a nuclide at some temperature\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'pinspec/src/Isotope\&.h'\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBIsotope\fP (char *\fB_isotope_name\fP)"
.br
.RI "\fI\fBIsotope\fP constructor\&. \fP"
.ti -1c
.RI "virtual \fB~Isotope\fP ()"
.br
.RI "\fI\fBIsotope\fP destructor deletes arrays of cross-section values that have been assigned to this isotope\&. \fP"
.ti -1c
.RI "void \fBparseName\fP ()"
.br
.RI "\fIParse input name and set atomic number for isotope\&. \fP"
.ti -1c
.RI "void \fBmakeFissionable\fP ()"
.br
.RI "\fIInform isotope that it is fissionable\&. \fP"
.ti -1c
.RI "char * \fBgetIsotopeName\fP () const "
.br
.RI "\fIReturns the name of the of isotope\&. \fP"
.ti -1c
.RI "int \fBgetA\fP () const "
.br
.RI "\fIReturns the atomic number of this isotope\&. \fP"
.ti -1c
.RI "float \fBgetAlpha\fP () const "
.br
.RI "\fIReturns the alpha $ \alpha = ((A-1)/(A+1))^2 $ values for this isotope\&. \fP"
.ti -1c
.RI "float \fBgetTemperature\fP () const "
.br
.RI "\fIReturn the temperature in degrees Kelvin for this isotope\&. \fP"
.ti -1c
.RI "float \fBgetMuAverage\fP () const "
.br
.RI "\fIReturn the average value of the cosine of the scattering angle\&. \fP"
.ti -1c
.RI "bool \fBisFissionable\fP () const "
.br
.RI "\fIReturn whether this isotope is fissionable (true) or not (false) \fP"
.ti -1c
.RI "int \fBgetNumXSEnergies\fP (char *xs_type) const "
.br
.RI "\fIReturns the number of energies for a particular cross-section type\&. \fP"
.ti -1c
.RI "float \fBgetElasticXS\fP (float energy) const "
.br
.RI "\fIReturns the microscopic elastic scattering cross-section value for some energy\&. \fP"
.ti -1c
.RI "float \fBgetElasticXS\fP (int energy_index) const "
.br
.RI "\fIReturns the microscopic elastic cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionXS\fP (float energy) const "
.br
.RI "\fIReturns the microscopic absorption cross-section value for some energy\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionXS\fP (int energy_index) const "
.br
.RI "\fIReturns the microscopic absorption cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetCaptureXS\fP (float energy) const "
.br
.RI "\fIReturns the microscopic capture cross-section value for some energy\&. \fP"
.ti -1c
.RI "float \fBgetCaptureXS\fP (int energy_index) const "
.br
.RI "\fIReturns the microscopic capture cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetFissionXS\fP (float energy) const "
.br
.RI "\fIReturns the microscopic fission cross-section value for some energy\&. \fP"
.ti -1c
.RI "float \fBgetFissionXS\fP (int energy_index) const "
.br
.RI "\fIReturns the microscopic fission cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetTotalXS\fP (float energy) const "
.br
.RI "\fIReturns the microscopic total cross-section value for some energy\&. \fP"
.ti -1c
.RI "float \fBgetTotalXS\fP (int energy_index) const "
.br
.RI "\fIReturns the microscopic total cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetTransportXS\fP (int energy_index) const "
.br
.RI "\fIReturns the microscopic transport cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetTransportXS\fP (float energy) const "
.br
.RI "\fIReturns the microscopic transport cross-section value for some energy\&. \fP"
.ti -1c
.RI "bool \fBusesThermalScattering\fP ()"
.br
.RI "\fIThis method returns true if the thermal scattering distributions for this isotope are to be used when sampling outgoing collision energy\&. \fP"
.ti -1c
.RI "bool \fBisRescaled\fP () const "
.br
.RI "\fIThis method returns whether or not the \fBIsotope\fP's cross-sections have been rescaled to a uniform lethargy grid\&. \fP"
.ti -1c
.RI "int \fBgetEnergyGridIndex\fP (float energy) const "
.br
.RI "\fIThis method returns the index for a certain energy (eV) into the \fBIsotope\fP's uniform lethargy grid\&. \fP"
.ti -1c
.RI "void \fBretrieveXSEnergies\fP (float *energies, int num_xs, char *xs_type) const "
.br
.RI "\fIFills an array with cross-section energy values\&. \fP"
.ti -1c
.RI "void \fBretrieveXS\fP (float *xs, int num_xs, char *xs_type) const "
.br
.RI "\fIFills an array with microscopic cross-section values\&. \fP"
.ti -1c
.RI "void \fBsetElasticXS\fP (double *energies, int num_energies, double *elastic_xs, int num_xs)"
.br
.RI "\fISets the elastic cross-section data for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetCaptureXS\fP (double *energies, int num_energies, double *capture_xs, int num_xs)"
.br
.RI "\fISets the capture cross-section data for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetFissionXS\fP (double *energies, int num_energies, double *fission_xs, int num_xs)"
.br
.RI "\fISets the fission cross-section data for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetMultigroupElasticXS\fP (double *energies, int num_energies, double *elastic_xs, int num_xs)"
.br
.RI "\fISets the multigroup elastic cross-section data for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetMultigroupCaptureXS\fP (double *energies, int num_energies, double *capture_xs, int num_xs)"
.br
.RI "\fISets the multigroup capture cross-section data for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetMultigroupFissionXS\fP (double *energies, int num_energies, double *fission_xs, int num_xs)"
.br
.RI "\fISets the multigroup fission cross-section data for this isotope\&. \fP"
.ti -1c
.RI "void \fBloadXS\fP (char *xs_type)"
.br
.RI "\fILoad the ENDF cross-section data for a particular cross-section from an ASCII file into the appropriate array for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetA\fP (int A)"
.br
.RI "\fISet the atomic number and update alpha, eta and rho\&. \fP"
.ti -1c
.RI "void \fBsetTemperature\fP (float T)"
.br
.RI "\fISet the temperature of the isotope in degrees Kelvin\&. \fP"
.ti -1c
.RI "void \fBneglectThermalScattering\fP ()"
.br
.RI "\fIInforms isotope not to use thermal scattering to sample outgoing collision energies\&. \fP"
.ti -1c
.RI "void \fBuseThermalScattering\fP ()"
.br
.RI "\fIInforms isotope to use thermal scattering to sample outgoing collision energies\&. \fP"
.ti -1c
.RI "\fBIsotope\fP * \fBclone\fP ()"
.br
.RI "\fIThis method clones a given \fBIsotope\fP class object by executing a deep copy of all of the \fBIsotope\fP's class attributes and giving them to a new \fBIsotope\fP class object\&. \fP"
.ti -1c
.RI "void \fBsampleCollisionType\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fIDetermines a random collision type based on the values of each of the isotope's cross-section values at a given enery\&. \fP"
.ti -1c
.RI "float \fBgetDistanceTraveled\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fIFor a given neutron, this method samples a distance traveled to next collision\&. \fP"
.ti -1c
.RI "void \fBcollideNeutron\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fIFor a given energy, this method samples a collision type, updates the neutron's outgoing energy and kills the neutron if it sampled absorption or leakage\&. \fP"
.ti -1c
.RI "float \fBgetThermalScatteringEnergy\fP (float energy)"
.br
.RI "\fIFor a given neutron energy (eV) in a scattering collision, this function returns the outgoing energy in eV, $ E' $, for the collision based on its thermal scattering distributions\&. \fP"
.ti -1c
.RI "int \fBgetNumThermalCDFs\fP ()"
.br
.RI "\fIReturns the number of thermal scattering CDFs\&. \fP"
.ti -1c
.RI "int \fBgetNumThermalCDFBins\fP ()"
.br
.RI "\fIReturns the number of energy bins for each thermal scattering CDF\&. \fP"
.ti -1c
.RI "void \fBretrieveThermalCDFs\fP (float *cdfs, int num_values)"
.br
.RI "\fILoads an input array with the values for each of the isotope's thermal CDFs\&. \fP"
.ti -1c
.RI "void \fBretrieveThermalPDFs\fP (float *pdfs, int num_values)"
.br
.RI "\fILoads an input array with the energies for each of the isotope's thermal PDFs\&. \fP"
.ti -1c
.RI "void \fBretrieveEtokT\fP (float *E_to_kT, int num_cdfs)"
.br
.RI "\fILoads an input array with the $ \frac{E}{kT} $ values for each thermal scattering CDF\&. \fP"
.ti -1c
.RI "void \fBretrieveEprimeToE\fP (float *Eprime_to_E, int num_bins)"
.br
.RI "\fILoads an input array with the $ \frac{E'}{E} $ values for each thermal scattering CDF\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBloadXS\fP ()"
.br
.RI "\fILoad the ENDF cross-section data from ASCII files into arrays for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetElasticXS\fP (float *elastic_xs, float *elastic_xs_energies, int num_elastic_xs)"
.br
.RI "\fISet the elastic cross-section for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetCaptureXS\fP (float *capture_xs, float *capture_xs_energies, int num_capture_xs)"
.br
.RI "\fISet the capture cross-section for this isotope\&. \fP"
.ti -1c
.RI "void \fBsetFissionXS\fP (float *fission_xs, float *fission_xs_energies, int num_fission_xs)"
.br
.RI "\fISet the fission cross-section for this isotope\&. \fP"
.ti -1c
.RI "void \fBrescaleXS\fP (float start_energy, float end_energy, int num_energies)"
.br
.RI "\fIRescales all of the isotope's cross-sections onto a uniform lethargy grid\&. \fP"
.ti -1c
.RI "void \fBgenerateAbsorptionXS\fP (float start_energy, float end_energy, int num_energies)"
.br
.RI "\fIComputes the microscopic absorption cross-section from the isotope's capture and fission (if applicable) cross-sections\&. \fP"
.ti -1c
.RI "void \fBgenerateTotalXS\fP (float start_energy, float end_energy, int num_energies)"
.br
.RI "\fIComputes the microscopic total cross-section from the isotope's capture, elastic scatter and fission (if applicable) cross-sections\&. \fP"
.ti -1c
.RI "void \fBinitializeThermalScattering\fP (float start_energy, float end_energy, int num_bins, int num_distributions)"
.br
.RI "\fIThis method initializes the probability distributions for thermal scattering\&. \fP"
.ti -1c
.RI "float \fBthermalScatteringProb\fP (float E_prime_to_E, int dist_index)"
.br
.RI "\fIThis function computes the thermal scattering probability for a ratio of initial to final energies\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char * \fB_isotope_name\fP"
.br
.ti -1c
.RI "int \fB_A\fP"
.br
.ti -1c
.RI "float \fB_alpha\fP"
.br
.ti -1c
.RI "float \fB_eta\fP"
.br
.ti -1c
.RI "float \fB_rho\fP"
.br
.ti -1c
.RI "float \fB_AO\fP"
.br
.ti -1c
.RI "float \fB_T\fP"
.br
.ti -1c
.RI "float \fB_mu_avg\fP"
.br
.ti -1c
.RI "bool \fB_fissionable\fP"
.br
.ti -1c
.RI "bool \fB_rescaled\fP"
.br
.ti -1c
.RI "int \fB_num_elastic_xs\fP"
.br
.ti -1c
.RI "float * \fB_elastic_xs\fP"
.br
.ti -1c
.RI "float * \fB_elastic_xs_energies\fP"
.br
.ti -1c
.RI "bool \fB_elastic_rescaled\fP"
.br
.ti -1c
.RI "int \fB_num_capture_xs\fP"
.br
.ti -1c
.RI "float * \fB_capture_xs\fP"
.br
.ti -1c
.RI "float * \fB_capture_xs_energies\fP"
.br
.ti -1c
.RI "bool \fB_capture_rescaled\fP"
.br
.ti -1c
.RI "int \fB_num_fission_xs\fP"
.br
.ti -1c
.RI "float * \fB_fission_xs\fP"
.br
.ti -1c
.RI "float * \fB_fission_xs_energies\fP"
.br
.ti -1c
.RI "bool \fB_fission_rescaled\fP"
.br
.ti -1c
.RI "int \fB_num_absorb_xs\fP"
.br
.ti -1c
.RI "float * \fB_absorb_xs\fP"
.br
.ti -1c
.RI "float * \fB_absorb_xs_energies\fP"
.br
.ti -1c
.RI "int \fB_num_total_xs\fP"
.br
.ti -1c
.RI "float * \fB_total_xs\fP"
.br
.ti -1c
.RI "float * \fB_total_xs_energies\fP"
.br
.ti -1c
.RI "int \fB_num_energies\fP"
.br
.ti -1c
.RI "float \fB_start_lethargy\fP"
.br
.ti -1c
.RI "float \fB_end_lethargy\fP"
.br
.ti -1c
.RI "float \fB_delta_lethargy\fP"
.br
.ti -1c
.RI "bool \fB_use_thermal_scattering\fP"
.br
.ti -1c
.RI "float \fB_kB\fP"
.br
.ti -1c
.RI "int \fB_num_thermal_cdfs\fP"
.br
.ti -1c
.RI "int \fB_num_thermal_cdf_bins\fP"
.br
.ti -1c
.RI "float * \fB_thermal_dist\fP"
.br
.ti -1c
.RI "float ** \fB_thermal_cdfs\fP"
.br
.ti -1c
.RI "float * \fB_E_to_kT\fP"
.br
.ti -1c
.RI "float * \fB_Eprime_to_E\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBIsotope\fP represents a nuclide at some temperature\&. 

The \fBIsotope\fP class represents a nuclide and all of its properties which are relevant to reactor physics calculations\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Isotope::Isotope (char *isotope_name)"

.PP
\fBIsotope\fP constructor\&. Searches the cross-section library for appropriately named files using the isotope name and loads the capture, scatter, and fission (if file is found) cross-sectoins\&. By default, the constructor rescales the cross-sections onto a uniform lethargy grid of 100,000 values between 1E-5 eV and 20 MeV\&. In addition, the constructor creates thermal scattering CDFs for the isotope at 300K by default\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBIsotope\fP * Isotope::clone ()"

.PP
This method clones a given \fBIsotope\fP class object by executing a deep copy of all of the \fBIsotope\fP's class attributes and giving them to a new \fBIsotope\fP class object\&. \fBReturns:\fP
.RS 4
a pointer to the new cloned \fBIsotope\fP class object 
.RE
.PP

.SS "void Isotope::collideNeutron (\fBneutron\fP *neutron)"

.PP
For a given energy, this method samples a collision type, updates the neutron's outgoing energy and kills the neutron if it sampled absorption or leakage\&. \fBParameters:\fP
.RS 4
\fIneutron\fP the neutron struct of interest 
.RE
.PP

.SS "void Isotope::generateAbsorptionXS (floatstart_energy, floatend_energy, intnum_energies)\fC [private]\fP"

.PP
Computes the microscopic absorption cross-section from the isotope's capture and fission (if applicable) cross-sections\&. This class method computes the absorption cross-section on a uniform lethargy grid\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstart_energy\fP the highest lethargy value in the grid 
.br
\fIend_energy\fP the lowest lethargy value in the grid 
.br
\fInum_energies\fP the number of energies represented in the grid 
.RE
.PP

.SS "void Isotope::generateTotalXS (floatstart_energy, floatend_energy, intnum_energies)\fC [private]\fP"

.PP
Computes the microscopic total cross-section from the isotope's capture, elastic scatter and fission (if applicable) cross-sections\&. This class method computes the total cross-section on a uniform lethargy grid\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstart_energy\fP the highest lethargy value in the grid 
.br
\fIend_energy\fP the lowest lethargy value in the grid 
.br
\fInum_energies\fP the number of energies represented in the grid 
.RE
.PP

.SS "int Isotope::getA () const"

.PP
Returns the atomic number of this isotope\&. \fBReturns:\fP
.RS 4
the atomic number 
.RE
.PP

.SS "float Isotope::getAbsorptionXS (floatenergy) const"

.PP
Returns the microscopic absorption cross-section value for some energy\&. Uses linear interpolation to compute the cross-section at a a certain energy (eV)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP the energy (eV) of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic absorption cross-section 
.RE
.PP

.SS "float Isotope::getAbsorptionXS (intenergy_index) const"

.PP
Returns the microscopic absorption cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the energy array 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic absorption cross-section 
.RE
.PP

.SS "float Isotope::getAlpha () const"

.PP
Returns the alpha $ \alpha = ((A-1)/(A+1))^2 $ values for this isotope\&. \fBReturns:\fP
.RS 4
alpha 
.RE
.PP

.SS "float Isotope::getCaptureXS (floatenergy) const"

.PP
Returns the microscopic capture cross-section value for some energy\&. Uses linear interpolation to compute the cross-section at a a certain energy (eV)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP the energy (eV) of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic absorption cross-section 
.RE
.PP

.SS "float Isotope::getCaptureXS (intenergy_index) const"

.PP
Returns the microscopic capture cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the energy array 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic capture cross-section 
.RE
.PP

.SS "float Isotope::getDistanceTraveled (\fBneutron\fP *neutron)"

.PP
For a given neutron, this method samples a distance traveled to next collision\&. \fBParameters:\fP
.RS 4
\fIneutron\fP the neutron struct of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the distance traveled 
.RE
.PP

.SS "float Isotope::getElasticXS (floatenergy) const"

.PP
Returns the microscopic elastic scattering cross-section value for some energy\&. Uses linear interpolation to compute the cross-section at a a certain energy (eV)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP the energy (eV) of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic elastic scattering cross-section 
.RE
.PP

.SS "float Isotope::getElasticXS (intenergy_index) const"

.PP
Returns the microscopic elastic cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the energy array 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic elastic cross-section 
.RE
.PP

.SS "int Isotope::getEnergyGridIndex (floatenergy) const\fC [inline]\fP"

.PP
This method returns the index for a certain energy (eV) into the \fBIsotope\fP's uniform lethargy grid\&. The index computed is that of nearest energy less than or equal to the input energy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP the energy (eV) of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the index into the uniform lethargy grid 
.RE
.PP

.SS "float Isotope::getFissionXS (floatenergy) const"

.PP
Returns the microscopic fission cross-section value for some energy\&. Uses linear interpolation to compute the cross-section at a a certain energy (eV)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP the energy (eV) of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic fission cross-section 
.RE
.PP

.SS "float Isotope::getFissionXS (intenergy_index) const"

.PP
Returns the microscopic fission cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the energy array 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic fission cross-section 
.RE
.PP

.SS "char * Isotope::getIsotopeName () const"

.PP
Returns the name of the of isotope\&. \fBReturns:\fP
.RS 4
character array with name of isotope 
.RE
.PP

.SS "float Isotope::getMuAverage () const"

.PP
Return the average value of the cosine of the scattering angle\&. Returns the average value of cosine of theta for this isotope in a scattering collision: $ \left<\mu\right> = \frac{2}{3A} $ 
.PP
\fBReturns:\fP
.RS 4
the average for mu 
.RE
.PP

.SS "int Isotope::getNumThermalCDFBins ()"

.PP
Returns the number of energy bins for each thermal scattering CDF\&. \fBReturns:\fP
.RS 4
the number of energy bins per thermal scattering CDF 
.RE
.PP

.SS "int Isotope::getNumThermalCDFs ()"

.PP
Returns the number of thermal scattering CDFs\&. \fBReturns:\fP
.RS 4
the number of thermal scattering CDFs 
.RE
.PP

.SS "int Isotope::getNumXSEnergies (char *xs_type) const"

.PP
Returns the number of energies for a particular cross-section type\&. Returns the number of energies for 'capture', 'elastic', 'fission', 'fission' and 'absorption cross-section types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxs_type\fP a character array for the xs_type 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.SS "float Isotope::getTemperature () const"

.PP
Return the temperature in degrees Kelvin for this isotope\&. \fBReturns:\fP
.RS 4
the temperature of this isotope 
.RE
.PP

.SS "float Isotope::getThermalScatteringEnergy (floatenergy)"

.PP
For a given neutron energy (eV) in a scattering collision, this function returns the outgoing energy in eV, $ E' $, for the collision based on its thermal scattering distributions\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of the neutron of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the outgoing energy (eV) 
.RE
.PP

.SS "float Isotope::getTotalXS (floatenergy) const"

.PP
Returns the microscopic total cross-section value for some energy\&. Uses linear interpolation to compute the cross-section at a a certain energy (eV)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP the energy (eV) of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic total cross-section 
.RE
.PP

.SS "float Isotope::getTotalXS (intenergy_index) const"

.PP
Returns the microscopic total cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the energy array 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic total cross-section 
.RE
.PP

.SS "float Isotope::getTransportXS (intenergy_index) const"

.PP
Returns the microscopic transport cross-section value for a certain energy index in this isotope's rescaled uniform lethargy grid of cross-section data\&. The transport cross-section corrects for anisotropic scattering using a linear approximation and is computed as follows:
.PP
$ \sigma_{tr} = \sigma_t - \left<\mu\right>\sigma_s $.PP
\fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the energy array 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic transport cross-section 
.RE
.PP

.SS "float Isotope::getTransportXS (floatenergy) const"

.PP
Returns the microscopic transport cross-section value for some energy\&. Uses linear interpolation to compute the cross-section at a a certain energy (eV)\&. The transport cross-section corrects for anisotropic scattering and is computed as follows:
.PP
$ \sigma_{tr} = \sigma_t - \left<\mu\right>\sigma_s $.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP the energy (eV) of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the microscopic transport cross-section 
.RE
.PP

.SS "void Isotope::initializeThermalScattering (floatstart_energy, floatend_energy, intnum_bins, intnum_distributions)\fC [private]\fP"

.PP
This method initializes the probability distributions for thermal scattering\&. It takes in arguments for the starting energy and end energy (ratios of kT) and the number of distributions which it uses to generate logarithmically spaced energies for the distributions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstart_energy\fP the first distribution's energy (ratio of kT) 
.br
\fIend_energy\fP the final distribution's energy (ratio of kT) 
.br
\fInum_bins\fP the number of bins per distribution 
.br
\fInum_distributions\fP the number of scattering distributions 
.RE
.PP

.SS "bool Isotope::isFissionable () const"

.PP
Return whether this isotope is fissionable (true) or not (false) \fBReturns:\fP
.RS 4
whether this isotope is fissionable 
.RE
.PP

.SS "bool Isotope::isRescaled () const"

.PP
This method returns whether or not the \fBIsotope\fP's cross-sections have been rescaled to a uniform lethargy grid\&. \fBReturns:\fP
.RS 4
whether or not the cross-sections have been rescaled 
.RE
.PP

.SS "void Isotope::loadXS ()\fC [private]\fP"

.PP
Load the ENDF cross-section data from ASCII files into arrays for this isotope\&. This method finds the appropriate ENDF data files for the isotope in the PINSPEC cross-section library based on the user-defined name of the isotope\&. If the appropriate files are not found the method will return an exception\&. If only capture and elastic scattering cross-section data files are discovered in the cross-section library then the isotope is not fissionable; otherwise if a fission cross-section file is found then the isotope is fissionable\&. Finally, after all cross-sections are parsed in from data files, this method computes a total cross-section and an absorption cross-section and then rescales all cross-sections onto a uniform lethargy grid to allow for fast O(1) data lookup\&. 
.SS "void Isotope::loadXS (char *xs_type)"

.PP
Load the ENDF cross-section data for a particular cross-section from an ASCII file into the appropriate array for this isotope\&. This method finds the appropriate ENDF data file for the isotope in the PINSPEC cross-section library based on the user-defined name of the isotope as well as the type of cross-section input ('capture' 'elastic', or 'fission')\&. If the appropriate file is not found the method will return an exception\&. Finally, after the cross-section is parsed in from the data file, this method recomputes a total cross-section and an absorption cross-section and then rescales all cross-sections onto a uniform lethargy grid to allow for fast O(1) data lookup\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxs_type\fP a character array for the cross-section type 
.RE
.PP

.SS "void Isotope::rescaleXS (floatstart_energy, floatend_energy, intnum_energies)\fC [private]\fP"

.PP
Rescales all of the isotope's cross-sections onto a uniform lethargy grid\&. Cross-section rescaling is useful because it allows for a fast O(1) table lookup (and linear interpolation) to compute cross-section values for any given energy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstart_energy\fP the highest lethargy value in the grid 
.br
\fIend_energy\fP the lowest lethargy value in the grid 
.br
\fInum_energies\fP the number of energies represented in the grid 
.RE
.PP

.SS "void Isotope::retrieveEprimeToE (float *Eprime_to_E, intnum_bins)"

.PP
Loads an input array with the $ \frac{E'}{E} $ values for each thermal scattering CDF\&. This method is intended to make data available to the PINSPEC user in Python\&. Although this function appears to require two input arguments, in reality it only requires one argument for the array in Python\&. This method would be called in Python as follows: 
.PP
.nf
num_bins = isotope\&.getNumThermalCDFBins()
Eprime_to_E = numpy\&.zeros(num_bins)
isotope\&.retrieveEprimeToE(E_prime_toE)

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIEprime_to_E\fP an array of $ \frac{E'}{E} $ values 
.br
\fInum_bins\fP the number of bins per thermal scattering CDF 
.RE
.PP

.SS "void Isotope::retrieveEtokT (float *E_to_kT, intnum_cdfs)"

.PP
Loads an input array with the $ \frac{E}{kT} $ values for each thermal scattering CDF\&. This method is intended to make data available to the PINSPEC user in Python\&. Although this function appears to require two input argument, in reality it only requires one argument for the array in Python\&. This method would be called in Python as follows:
.PP
.PP
.nf
num_cdfs = isotope\&.getNumThermalCDFs()
E_to_kT = numpy\&.zeros(num_cdfs)
isotope\&.retrieveEtokT(E_to_kT)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIE_to_kT\fP an array of $ \frac{E}{kT} $ values 
.br
\fInum_cdfs\fP the number of thermal scattering CDFs 
.RE
.PP

.SS "void Isotope::retrieveThermalCDFs (float *cdfs, intnum_values)"

.PP
Loads an input array with the values for each of the isotope's thermal CDFs\&. This method is intended to make the CDF data available to the PINSPEC user in Python\&. Although this function appears to require two input arguments - the cdfs array and the length of the array - in reality it only requires one argument for the array in Python\&. This method would be called in Python as follows:
.PP
.PP
.nf
num_cdfs = isotope\&.getNumThermalCDFs()
num_bins = isotope\&.getNumThermalCDFBins()
cdfs = numpy\&.zeros(num_cdfs * num_bins)
isotope\&.retrieveThermalCDFs(cdfs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIcdfs\fP an input array for to fill with CDF values 
.br
\fInum_values\fP the number of CDF bins multiplied by the number of CDFs 
.RE
.PP

.SS "void Isotope::retrieveThermalPDFs (float *pdfs, intnum_values)"

.PP
Loads an input array with the energies for each of the isotope's thermal PDFs\&. This method is intended to make the PDF data available to the PINSPEC user in Python\&. Although this function appears to require two input arguments - the PDFs array and the length of the array - in reality it only requires one argument for the array in Python\&. This method would be called in Python as follows:
.PP
.PP
.nf
num_cdfs = isotope\&.getNumThermalCDFs()
num_bins = isotope\&.getNumThermalCDFBins()
pdfs = numpy\&.zeros(num_cdfs * num_bins)
isotope\&.retrieveThermalDistributions(pdfs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIpdfs\fP an input array for to fill with CDF values 
.br
\fInum_values\fP the number of CDF bins multiplied by the number of CDFs 
.RE
.PP

.SS "void Isotope::retrieveXS (float *xs, intnum_xs, char *xs_type) const"

.PP
Fills an array with microscopic cross-section values\&. This method is a helper function to allow PINSPEC users to get access to the isotope's nuclear data in Python\&. A user must initialize a numpy array of the correct size (ie, a float64 array the length of the number of cross-section values) as input to this function\&. This function then fills the numpy array with the data values for one of the isotope's cross-sections\&. An example of how this function might be called in Python is as follows:
.PP
.PP
.nf
num_xs = isotope\&.getNumXSEnergies()
xs = numpy\&.zeros(num_xs)          
isotope\&.retrieveXS(xs, num_xs, 'capture')
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIxs\fP an array to fill with the microscopic cross-section data 
.br
\fInum_xs\fP the number of cross-section values 
.br
\fIxs_type\fP the type of cross-section 
.RE
.PP

.SS "void Isotope::retrieveXSEnergies (float *energies, intnum_xs, char *xs_type) const"

.PP
Fills an array with cross-section energy values\&. This method is a helper function to allow PINSPEC users to get access to the isotope's nuclear data in Python\&. A user must initialize a numpy array of the correct size (ie, a float64 array the length of the number of cross-section values) as input to this function\&. This function then fills the numpy array with the energy values for the isotope's cross-section data\&. An example of how this function might be called in Python is as follows:
.PP
.PP
.nf
num_energies = isotope\&.getNumXSEnergies()
energies = numpy\&.zeros(num_energies)          
isotope\&.retrieveXSEnergies(energies, num_energies, 'capture')
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array to fill with the cross-section energies 
.br
\fInum_xs\fP the number of cross-section values 
.br
\fIxs_type\fP the type of cross-section 
.RE
.PP

.SS "void Isotope::sampleCollisionType (\fBneutron\fP *neutron)"

.PP
Determines a random collision type based on the values of each of the isotope's cross-section values at a given enery\&. \fBParameters:\fP
.RS 4
\fIneutron\fP a pointer to structure the of interest 
.RE
.PP

.SS "void Isotope::setA (intA)"

.PP
Set the atomic number and update alpha, eta and rho\&. Computes alpha, eta, rho and mu as follows:
.PP
$ \alpha = \left(\frac{A-1}{A+1}\right)^2 $ $ \eta = \left(\frac{A+1}{2\sqrt{A}}\right)^2 $ $ \rho = \left(\frac{A-1}{2\sqrt{A}}\right)^2 $
.PP
\fBParameters:\fP
.RS 4
\fIA\fP the isotope's atomic number 
.RE
.PP

.SS "void Isotope::setCaptureXS (float *capture_xs, float *capture_xs_energies, intnum_capture_xs)\fC [private]\fP"

.PP
Set the capture cross-section for this isotope\&. \fBParameters:\fP
.RS 4
\fIcapture_xs\fP a float array of microscopic capture cross-sections 
.br
\fIcapture_xs_energies\fP a float array of energies (eV) 
.br
\fInum_capture_xs\fP the number of capture cross-section 
.RE
.PP

.SS "void Isotope::setCaptureXS (double *energies, intnum_energies, double *capture_xs, intnum_xs)"

.PP
Sets the capture cross-section data for this isotope\&. This is a helper function for users to assign the cross-section data for an isotope from a numpy array in Python\&. Although the prototype for this function seems to require four arguments - two with arrays of data for energies and cross-sections and two for the length of each array - in Python one must only give the method a handle to each of two arrays\&. A user may call this method from within Python as follows:
.PP
.PP
.nf
energies = numpy\&.array([1E-3, 0\&.1, 1\&., 10\&., 1000\&.])
xs = numpy\&.array([1000\&., 1000\&., 10\&., 1\&., 0\&.1])
isotope\&.setCaptureXS(energies, xs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array of energy values 
.br
\fInum_energies\fP the number of data points 
.br
\fIcapture_xs\fP the microscopic elastic cross-section values 
.br
\fInum_xs\fP the number of cross-section values 
.RE
.PP

.SS "void Isotope::setElasticXS (float *elastic_xs, float *elastic_xs_energies, intnum_elastic_xs)\fC [private]\fP"

.PP
Set the elastic cross-section for this isotope\&. \fBParameters:\fP
.RS 4
\fIelastic_xs\fP a float array of microscopic elastic cross-sections 
.br
\fIelastic_xs_energies\fP a float array of energies (eV) 
.br
\fInum_elastic_xs\fP the number of elastic cross-section values 
.RE
.PP

.SS "void Isotope::setElasticXS (double *energies, intnum_energies, double *elastic_xs, intnum_xs)"

.PP
Sets the elastic cross-section data for this isotope\&. This is a helper function for users to assign the cross-section data for an isotope from a numpy array in Python\&. Although the prototype for this function seems to require four arguments - two with arrays of data for energies and cross-sections and two for the length of each array - in Python one must only give the method a handle to each of two arrays\&. A user may call this method from within Python as follows:
.PP
.PP
.nf
energies = numpy\&.array([1E-3, 0\&.1, 1\&., 10\&., 1000\&.])
xs = numpy\&.array([1000\&., 1000\&., 10\&., 1\&., 0\&.1])
isotope\&.setElasticXS(energies, xs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array of energy values 
.br
\fInum_energies\fP the number of data points 
.br
\fIelastic_xs\fP the microscopic elastic cross-section values 
.br
\fInum_xs\fP the number of cross-section values 
.RE
.PP

.SS "void Isotope::setFissionXS (float *fission_xs, float *fission_xs_energies, intnum_fission_xs)\fC [private]\fP"

.PP
Set the fission cross-section for this isotope\&. \fBParameters:\fP
.RS 4
\fIfission_xs\fP a float array of microscopic fission cross-sections 
.br
\fIfission_xs_energies\fP a float array of energies (eV) 
.br
\fInum_fission_xs\fP the number of fission cross-sections values 
.RE
.PP

.SS "void Isotope::setFissionXS (double *energies, intnum_energies, double *fission_xs, intnum_xs)"

.PP
Sets the fission cross-section data for this isotope\&. This is a helper function for users to assign the cross-section data for an isotope from a numpy array in Python\&. Although the prototype for this function seems to require four arguments - two with arrays of data for energies and cross-sections and two for the length of each array - in Python one must only give the method a handle to each of two arrays\&. A user may call this method from within Python as follows:
.PP
.PP
.nf
energies = numpy\&.array([1E-3, 0\&.1, 1\&., 10\&., 1000\&.])
xs = numpy\&.array([1000\&., 1000\&., 10\&., 1\&., 0\&.1])
isotope\&.setFissionXS(energies, xs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array of energy values 
.br
\fInum_energies\fP the number of data points 
.br
\fIfission_xs\fP the microscopic fission cross-section values 
.br
\fInum_xs\fP the number of cross-section values 
.RE
.PP

.SS "void Isotope::setMultigroupCaptureXS (double *energies, intnum_energies, double *capture_xs, intnum_xs)"

.PP
Sets the multigroup capture cross-section data for this isotope\&. This is a helper function for users to assign the cross-section data for an isotope from a numpy array in Python\&. Although the prototype for this function seems to require four arguments - two with arrays of data for energies and cross-sections and two for the length of each array - in Python one must only give the method a handle to each of two arrays\&. A user may call this method from within Python as follows:
.PP
.PP
.nf
energies = numpy\&.array([1E-3, 0\&.1, 1\&., 10\&., 1000\&., 1E7])
xs = numpy\&.array([1000\&., 1000\&., 10\&., 1\&., 0\&.1])
isotope\&.setMultigroupCaptureXS(energies, xs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array of energy bounds 
.br
\fInum_energies\fP the number of energy bounds 
.br
\fIcapture_xs\fP the microscopic capture multigroup cross-sections 
.br
\fInum_xs\fP the number of multigroup cross-sections 
.RE
.PP

.SS "void Isotope::setMultigroupElasticXS (double *energies, intnum_energies, double *elastic_xs, intnum_xs)"

.PP
Sets the multigroup elastic cross-section data for this isotope\&. This is a helper function for users to assign the cross-section data for an isotope from a numpy array in Python\&. Although the prototype for this function seems to require four arguments - two with arrays of data for energies and cross-sections and two for the length of each array - in Python one must only give the method a handle to each of two arrays\&. A user may call this method from within Python as follows:
.PP
.PP
.nf
energies = numpy\&.array([1E-3, 0\&.1, 1\&., 10\&., 1000\&., 1E7])
xs = numpy\&.array([1000\&., 1000\&., 10\&., 1\&., 0\&.1])
isotope\&.setMultigroupElasticXS(energies, xs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array of energy bounds 
.br
\fInum_energies\fP the number of energy bounds 
.br
\fIelastic_xs\fP the microscopic elastic multigroup cross-sections 
.br
\fInum_xs\fP the number of multigroup cross-sections 
.RE
.PP

.SS "void Isotope::setMultigroupFissionXS (double *energies, intnum_energies, double *fission_xs, intnum_xs)"

.PP
Sets the multigroup fission cross-section data for this isotope\&. This is a helper function for users to assign the cross-section data for an isotope from a numpy array in Python\&. Although the prototype for this function seems to require four arguments - two with arrays of data for energies and cross-sections and two for the length of each array - in Python one must only give the method a handle to each of two arrays\&. A user may call this method from within Python as follows:
.PP
.PP
.nf
energies = numpy\&.array([1E-3, 0\&.1, 1\&., 10\&., 1000\&., 1E7])
xs = numpy\&.array([1000\&., 1000\&., 10\&., 1\&., 0\&.1])
isotope\&.setMultigroupFissionXS(energies, xs)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array of energy bounds 
.br
\fInum_energies\fP the number of energy bounds 
.br
\fIfission_xs\fP the microscopic fission multigroup cross-sections 
.br
\fInum_xs\fP the number of multigroup cross-sections 
.RE
.PP

.SS "void Isotope::setTemperature (floatT)"

.PP
Set the temperature of the isotope in degrees Kelvin\&. \fBParameters:\fP
.RS 4
\fIT\fP the temperature in degrees Kelvin 
.RE
.PP

.SS "float Isotope::thermalScatteringProb (floatE_prime_to_E, intdist_index)\fC [private]\fP"

.PP
This function computes the thermal scattering probability for a ratio of initial to final energies\&. \fBParameters:\fP
.RS 4
\fIE_prime_to_E\fP a ratio of initial to final energies 
.br
\fIdist_index\fP the distribution of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
the probability of the ratio occurring 
.RE
.PP

.SS "bool Isotope::usesThermalScattering ()"

.PP
This method returns true if the thermal scattering distributions for this isotope are to be used when sampling outgoing collision energy\&. \fBReturns:\fP
.RS 4
boolean if the thermal scattering distributions exist 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "int Isotope::_A\fC [private]\fP"
Atomic number 
.SS "float* Isotope::_absorb_xs\fC [private]\fP"
Array of microscopic absorption cross-section values 
.SS "float* Isotope::_absorb_xs_energies\fC [private]\fP"
Array of absorption cross-section energies (eV) 
.SS "float Isotope::_alpha\fC [private]\fP"
$ \alpha = \left(\frac{A-1}{A+1}\right)^2$ 
.SS "float Isotope::_AO\fC [private]\fP"
Atomic number ratio 
.SS "bool Isotope::_capture_rescaled\fC [private]\fP"
Whether or not the capture cross-section is rescaled onto a uniform lethargy grid 
.SS "float* Isotope::_capture_xs\fC [private]\fP"
Array of microscopic capture cross-section values 
.SS "float* Isotope::_capture_xs_energies\fC [private]\fP"
Array of capture cross-section energies (eV) 
.SS "float Isotope::_delta_lethargy\fC [private]\fP"
Space between lethargies in uniform grid 
.SS "float* Isotope::_E_to_kT\fC [private]\fP"
Array of the $ \frac{E}{kT} $ values for each PDF/CDF 
.SS "bool Isotope::_elastic_rescaled\fC [private]\fP"
Whether or not the elastic scattering cross-section is rescaled onto a uniform lethargy grid 
.SS "float* Isotope::_elastic_xs\fC [private]\fP"
Array of microscopic elastic scattering cross-section values 
.SS "float* Isotope::_elastic_xs_energies\fC [private]\fP"
Array of elastic scattering cross-section energies (eV) 
.SS "float Isotope::_end_lethargy\fC [private]\fP"
Final lethargy for uniform lethargy grid 
.SS "float* Isotope::_Eprime_to_E\fC [private]\fP"
Array of $ \frac{E}{E'} $ for each PDF/CDF 
.SS "float Isotope::_eta\fC [private]\fP"
$ \eta = \left(\frac{A+1}{2\sqrt{A}}\right)^2 $ 
.SS "bool Isotope::_fission_rescaled\fC [private]\fP"
Whether or not the fission cross-section is rescaled onto a uniform lethargy grid 
.SS "float* Isotope::_fission_xs\fC [private]\fP"
Array of microscopic fission cross-section values 
.SS "float* Isotope::_fission_xs_energies\fC [private]\fP"
Array of fission cross-section energies (eV) 
.SS "bool Isotope::_fissionable\fC [private]\fP"
Whether isotope is fissionable or not 
.SS "char* Isotope::_isotope_name\fC [private]\fP"
The name of the isotope-periodic table name followed by atomic number 
.SS "float Isotope::_kB\fC [private]\fP"
Boltzmann's constant 
.SS "float Isotope::_mu_avg\fC [private]\fP"
The average cosine of the scattering angle: $ \left<\mu\right> = \frac{2}{3A} $ 
.SS "int Isotope::_num_absorb_xs\fC [private]\fP"
The number of absorption cross-section data points 
.SS "int Isotope::_num_capture_xs\fC [private]\fP"
The number of capture cross-section data points 
.SS "int Isotope::_num_elastic_xs\fC [private]\fP"
The number of elastic scattering cross-section data points 
.SS "int Isotope::_num_energies\fC [private]\fP"
Number of rescaled cross-section values on uniform lethargy grid 
.SS "int Isotope::_num_fission_xs\fC [private]\fP"
The number of fission cross-section data points 
.SS "int Isotope::_num_thermal_cdf_bins\fC [private]\fP"
The number of bins per thermal scattering CDFs 
.SS "int Isotope::_num_thermal_cdfs\fC [private]\fP"
The number of thermal scattering CDFs 
.SS "int Isotope::_num_total_xs\fC [private]\fP"
The number of total cross-section data points 
.SS "bool Isotope::_rescaled\fC [private]\fP"
Whether cross-sections are rescaled on uniform lethargy grid 
.SS "float Isotope::_rho\fC [private]\fP"
$ \rho = \left(\frac{A+1}{2\sqrt{A}}\right) $ 
.SS "float Isotope::_start_lethargy\fC [private]\fP"
Starting lethargy for uniform lethargy grid 
.SS "float Isotope::_T\fC [private]\fP"
Temperature of the isotope in degrees Kelvin 
.SS "float** Isotope::_thermal_cdfs\fC [private]\fP"
2D array of thermal scattering CDFs 
.SS "float* Isotope::_thermal_dist\fC [private]\fP"
The number of thermal scattering PDFs 
.SS "float* Isotope::_total_xs\fC [private]\fP"
Array of microscopic total cross-section values 
.SS "float* Isotope::_total_xs_energies\fC [private]\fP"
Whether or not the total cross-section is rescaled onto a uniform lethargy grid 
.SS "bool Isotope::_use_thermal_scattering\fC [private]\fP"
Whether or not to use thermal scattering 

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
