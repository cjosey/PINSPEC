.TH "Material" 3 "Thu Apr 11 2013" "Version v0.1" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Material \- 
.PP
The \fBMaterial\fP class represents a collection of isotope objects\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include 'pinspec/src/Material\&.h'\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMaterial\fP (char *material_name)"
.br
.RI "\fI\fBMaterial\fP constructor\&. \fP"
.ti -1c
.RI "virtual \fB~Material\fP ()"
.br
.RI "\fIMterial destructor\&. \fP"
.ti -1c
.RI "char * \fBgetMaterialName\fP ()"
.br
.RI "\fIReturns the material name\&. \fP"
.ti -1c
.RI "float \fBgetMaterialNumberDensity\fP ()"
.br
.RI "\fIReturns the total number density for all isotopes within the material\&. \fP"
.ti -1c
.RI "\fBIsotope\fP * \fBgetIsotope\fP (char *isotope)"
.br
.RI "\fIThis method takes in a character array specifier for an isotope's name and returns a pointer to the \fBIsotope\fP\&. \fP"
.ti -1c
.RI "float \fBgetDensity\fP ()"
.br
.RI "\fIReturns the material's density\&. \fP"
.ti -1c
.RI "float \fBgetIsotopeNumDensity\fP (char *isotope)"
.br
.RI "\fIThis method takes in a character array specifier for an isotope's name and returns a float for the \fBIsotope\fP's number density in $ \frac{at}{cm^3} $\&. \fP"
.ti -1c
.RI "bool \fBcontainsIsotope\fP (\fBIsotope\fP *isotope)"
.br
.RI "\fIThis method checks if the material contains a given isotope\&. \fP"
.ti -1c
.RI "float \fBgetBucklingSquared\fP ()"
.br
.RI "\fIReturns the geometric buckling squared for the geometry\&. \fP"
.ti -1c
.RI "float \fBgetVolume\fP ()"
.br
.RI "\fIReturns the total volume of all regions containing this material\&. \fP"
.ti -1c
.RI "int \fBgetNumXSEnergies\fP (char *xs_type)"
.br
.RI "\fIReturns the total number of energies for which cross-sections are defined for one of the material's cross-section types\&. \fP"
.ti -1c
.RI "float \fBgetTotalMacroXS\fP (float energy)"
.br
.RI "\fIReturns the total macroscopic cross-section for the material at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetTotalMacroXS\fP (int energy_index)"
.br
.RI "\fIReturns the total macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetTotalMicroXS\fP (float energy)"
.br
.RI "\fIReturns the total microscopic cross-section for the material at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetTotalMicroXS\fP (int energy_index)"
.br
.RI "\fIReturns the total microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetElasticMacroXS\fP (float energy)"
.br
.RI "\fIReturns the total macroscopic elastic scattering cross-section for the material at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetElasticMacroXS\fP (int energy_index)"
.br
.RI "\fIReturns the elastic macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetElasticMicroXS\fP (float energy)"
.br
.RI "\fIReturns the total macroscopic elastic scattering cross-section for the material at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetElasticMicroXS\fP (int energy_index)"
.br
.RI "\fIReturns the elastic microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMacroXS\fP (float energy)"
.br
.RI "\fIReturns the total macroscopic absorption cross-section for the material at some energy\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMacroXS\fP (int energy_index)"
.br
.RI "\fIReturns the absorption macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMicroXS\fP (float energy)"
.br
.RI "\fIReturns the total microscopic absorption cross-section for the material at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetAbsorptionMicroXS\fP (int energy_index)"
.br
.RI "\fIReturns the absorption microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetCaptureMacroXS\fP (float energy)"
.br
.RI "\fIReturns the total macroscopic capture cross-section within this material at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetCaptureMacroXS\fP (int energy_index)"
.br
.RI "\fIReturns the capture macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetCaptureMicroXS\fP (float energy)"
.br
.RI "\fIReturns the total microscopic capture cross-section for the material at some energy (eV) \fP"
.ti -1c
.RI "float \fBgetCaptureMicroXS\fP (int energy_index)"
.br
.RI "\fIReturns the capture microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetFissionMacroXS\fP (float energy)"
.br
.RI "\fIReturns the total macroscopic fission cross-section for the material at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetFissionMacroXS\fP (int energy_index)"
.br
.RI "\fIReturns the fission macroscopic cross-section within the \fBMaterial\fP at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetFissionMicroXS\fP (float energy)"
.br
.RI "\fIReturns the total microscopic fission cross-section for the \fBMaterial\fP at some energy (eV)\&. \fP"
.ti -1c
.RI "float \fBgetFissionMicroXS\fP (int energy_index)"
.br
.RI "\fIReturns the fission microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fP"
.ti -1c
.RI "float \fBgetTransportMicroXS\fP (float energy)"
.br
.RI "\fIReturns the total microscopic transport cross-section for the material at some energy (eV) \fP"
.ti -1c
.RI "float \fBgetTransportMicroXS\fP (int energy_index)"
.br
.RI "\fIReturns the transport microscopic cross-section for the material at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "float \fBgetTransportMacroXS\fP (float energy)"
.br
.RI "\fIReturns the total macroscopic transport cross-section for the material at some energy (eV) \fP"
.ti -1c
.RI "float \fBgetTransportMacroXS\fP (int energy_index)"
.br
.RI "\fIReturns the transport macroscopic cross-section for the material at some index into the uniform lethargy grid\&. \fP"
.ti -1c
.RI "void \fBretrieveXSEnergies\fP (float *energies, int num_xs, char *xs_type)"
.br
.RI "\fIFills an array with cross-section energy values\&. \fP"
.ti -1c
.RI "void \fBretrieveXS\fP (float *xs, int num_xs, char *xs_type)"
.br
.RI "\fIFills an array with macroscopic cross-section values\&. \fP"
.ti -1c
.RI "void \fBsetMaterialName\fP (char *name)"
.br
.RI "\fISets the name for the material\&. \fP"
.ti -1c
.RI "void \fBsetDensity\fP (float density, char *unit)"
.br
.RI "\fISets this material's density\&. \fP"
.ti -1c
.RI "void \fBsetNumberDensity\fP (float number_density, const char *unit)"
.br
.RI "\fISets the material's number density\&. \fP"
.ti -1c
.RI "void \fBsetAtomicMass\fP (float atomic_mass)"
.br
.RI "\fISets the material's total atomic mass\&. \fP"
.ti -1c
.RI "void \fBsetBucklingSquared\fP (float buckling_squared)"
.br
.RI "\fISets the squared geomtric buckling for the geometry in which this material resides\&. \fP"
.ti -1c
.RI "void \fBincrementVolume\fP (float volume)"
.br
.RI "\fIIncrements the volume occupied by this material in the geometry\&. \fP"
.ti -1c
.RI "void \fBaddIsotope\fP (\fBIsotope\fP *isotope, float atomic_ratio)"
.br
.RI "\fIAdds a new isotope to this material with a given atomic ratio\&. \fP"
.ti -1c
.RI "\fBMaterial\fP * \fBclone\fP ()"
.br
.RI "\fIThis method clones a given material object by executing a deep copy of all of the material's class attributes and giving them to a new material class object\&. \fP"
.ti -1c
.RI "void \fBsampleIsotope\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fISamples an isotope for a collision\&. \fP"
.ti -1c
.RI "void \fBcollideNeutron\fP (\fBneutron\fP *\fBneutron\fP)"
.br
.RI "\fISamples an isotope and a reaction rate for a neutron\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "char * \fB_material_name\fP"
.br
.ti -1c
.RI "float \fB_material_density\fP"
.br
.ti -1c
.RI "float \fB_material_number_density\fP"
.br
.ti -1c
.RI "float \fB_material_atomic_mass\fP"
.br
.ti -1c
.RI "float \fB_buckling_squared\fP"
.br
.ti -1c
.RI "float \fB_volume\fP"
.br
.ti -1c
.RI "std::map< char *, std::pair
.br
< float, \fBIsotope\fP * > > \fB_isotopes\fP"
.br
.ti -1c
.RI "std::map< \fBIsotope\fP *, float > \fB_isotopes_AO\fP"
.br
.ti -1c
.RI "\fBdensityUnit\fP \fB_density_unit\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fBMaterial\fP class represents a collection of isotope objects\&. 

The \fBMaterial\fP class represents a collection of isotope objects and samples isotopes for collisions with neutrons\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Material::Material (char *material_name)"

.PP
\fBMaterial\fP constructor\&. Sets the user-defined name along with default values for the material density (0), material number density (0), material atomic mass (1), buckling (0) and volume (0)\&. 
.SS "Material::~Material ()\fC [virtual]\fP"

.PP
Mterial destructor\&. \fBMaterial\fP does not need to delete its isotopes since SWIG handles garbage collection\&. 
.SH "Member Function Documentation"
.PP 
.SS "void Material::addIsotope (\fBIsotope\fP *isotope, floatatomic_ratio)"

.PP
Adds a new isotope to this material with a given atomic ratio\&. The atomic ratio is the number of atoms of this isotope per equivalent molecule of the material\&. For example, for a material of UO2 one would add uranium and oxygen isotopes as follows:
.PP
.PP
.nf
uo2\&.addIsotope(u235, 1\&.)
uo2\&.addIsotope(o16, 2\&.)
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIisotope\fP a pointer to the isotope 
.br
\fIatomic_ratio\fP the atomic ratio of the isotope within the material 
.RE
.PP

.SS "\fBMaterial\fP * Material::clone ()"

.PP
This method clones a given material object by executing a deep copy of all of the material's class attributes and giving them to a new material class object\&. \fBReturns:\fP
.RS 4
a pointer to the new cloned material class object 
.RE
.PP

.SS "void Material::collideNeutron (\fBneutron\fP *neutron)"

.PP
Samples an isotope and a reaction rate for a neutron\&. For a given energy, this method calls \fBsampleIsotope()\fP to sample an isotope, then samples a reaction type in that isotope by using \fBIsotope::collideNeutron()\fP method\&. After this method returns, the neutron's outgoing collision energy has been updated and the neutron has been killed if it was absorbed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIneutron\fP the neutron to collide within the material 
.RE
.PP

.SS "bool Material::containsIsotope (\fBIsotope\fP *isotope)"

.PP
This method checks if the material contains a given isotope\&. \fBParameters:\fP
.RS 4
\fIisotope\fP a pointer to the isotope of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the material contains the isotope; otherwise false 
.RE
.PP

.SS "float Material::getAbsorptionMacroXS (floatenergy)"

.PP
Returns the total macroscopic absorption cross-section for the material at some energy\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic absorption cross-section $ (cm^{-1}) $ 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic absorption cross-section (cm^-1) 
.RE
.PP

.SS "float Material::getAbsorptionMacroXS (intenergy_index)"

.PP
Returns the absorption macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the absorption macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getAbsorptionMicroXS (floatenergy)"

.PP
Returns the total microscopic absorption cross-section for the material at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic absorption cross-section 
.RE
.PP

.SS "float Material::getAbsorptionMicroXS (intenergy_index)"

.PP
Returns the absorption microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the absorption microscopic cross-section 
.RE
.PP

.SS "float Material::getBucklingSquared ()"

.PP
Returns the geometric buckling squared for the geometry\&. \fBReturns:\fP
.RS 4
the geometric buckling squared 
.RE
.PP

.SS "float Material::getCaptureMacroXS (floatenergy)"

.PP
Returns the total macroscopic capture cross-section within this material at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic capture cross-section $ (cm^{-1}) $ 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic capture cross-section (cm^-1) 
.RE
.PP

.SS "float Material::getCaptureMacroXS (intenergy_index)"

.PP
Returns the capture macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
the capture macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getCaptureMicroXS (floatenergy)"

.PP
Returns the total microscopic capture cross-section for the material at some energy (eV) \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic capture cross-section 
.RE
.PP

.SS "float Material::getCaptureMicroXS (intenergy_index)"

.PP
Returns the capture microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the inex into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the capture microscopic cross-section 
.RE
.PP

.SS "float Material::getDensity ()"

.PP
Returns the material's density\&. \fBReturns:\fP
.RS 4
the material's density 
.RE
.PP

.SS "float Material::getElasticMacroXS (floatenergy)"

.PP
Returns the total macroscopic elastic scattering cross-section for the material at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic elastic scattering cross-section $ (cm^{-1}) $ 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total elastic macroscopic scattering cross-section (cm^-1) 
.RE
.PP

.SS "float Material::getElasticMacroXS (intenergy_index)"

.PP
Returns the elastic macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the elastic macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getElasticMicroXS (floatenergy)"

.PP
Returns the total macroscopic elastic scattering cross-section for the material at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total elastic microscopic scattering cross-section 
.RE
.PP

.SS "float Material::getElasticMicroXS (intenergy_index)"

.PP
Returns the elastic microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the elastic microscopic cross-section 
.RE
.PP

.SS "float Material::getFissionMacroXS (floatenergy)"

.PP
Returns the total macroscopic fission cross-section for the material at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic fission cross-section $ (cm^{-1}) $ 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIenergy\fP energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic fission cross-section (cm^-1) 
.RE
.PP

.SS "float Material::getFissionMacroXS (intenergy_index)"

.PP
Returns the fission macroscopic cross-section within the \fBMaterial\fP at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the fission macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getFissionMicroXS (floatenergy)"

.PP
Returns the total microscopic fission cross-section for the \fBMaterial\fP at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic fission cross-section 
.RE
.PP

.SS "float Material::getFissionMicroXS (intenergy_index)"

.PP
Returns the fission microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the fission microscopic cross-section 
.RE
.PP

.SS "\fBIsotope\fP * Material::getIsotope (char *isotope)"

.PP
This method takes in a character array specifier for an isotope's name and returns a pointer to the \fBIsotope\fP\&. An example of how this would be called in python is as follows:
.PP
.PP
.nf
h1 = material\&.getIsotope('H-1')
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIisotope\fP the name of the isotope 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the \fBIsotope\fP 
.RE
.PP

.SS "float Material::getIsotopeNumDensity (char *isotope)"

.PP
This method takes in a character array specifier for an isotope's name and returns a float for the \fBIsotope\fP's number density in $ \frac{at}{cm^3} $\&. \fBParameters:\fP
.RS 4
\fIisotope\fP the name of the isotope 
.RE
.PP
\fBReturns:\fP
.RS 4
the isotope's number density 
.RE
.PP

.SS "char * Material::getMaterialName ()"

.PP
Returns the material name\&. \fBReturns:\fP
.RS 4
the name of this material 
.RE
.PP

.SS "float Material::getMaterialNumberDensity ()"

.PP
Returns the total number density for all isotopes within the material\&. \fBReturns:\fP
.RS 4
the total number density $ \frac{at}{cm^3} $\&. 
.RE
.PP

.SS "int Material::getNumXSEnergies (char *xs_type)"

.PP
Returns the total number of energies for which cross-sections are defined for one of the material's cross-section types\&. This method assumes that each isotope contains cross-sections defined on a uniform lethargy grid (100,000 points by default)\&. The method queries the first isotope in the material's collection of isotopes to determine the number of cross-sections\&. The method will return the number of values for 'capture', 'elastic', 'fission', 'absorption' and 'total' cross-section types\&. 
.PP
\fBParameters:\fP
.RS 4
\fIxs_type\fP a character array for the cross-section type of interest 
.RE
.PP
\fBReturns:\fP
.RS 4
then number of cross-section values 
.RE
.PP

.SS "float Material::getTotalMacroXS (floatenergy)"

.PP
Returns the total macroscopic cross-section for the material at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getTotalMacroXS (intenergy_index)"

.PP
Returns the total macroscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getTotalMicroXS (floatenergy)"

.PP
Returns the total microscopic cross-section for the material at some energy (eV)\&. \fBParameters:\fP
.RS 4
\fIenergy\fP energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic cross-section 
.RE
.PP

.SS "float Material::getTotalMicroXS (intenergy_index)"

.PP
Returns the total microscopic cross-section for the material at some index into the uniform lethargy grid of cross-section data\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic cross-section 
.RE
.PP

.SS "float Material::getTransportMacroXS (floatenergy)"

.PP
Returns the total macroscopic transport cross-section for the material at some energy (eV) \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total macroscopic transport cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getTransportMacroXS (intenergy_index)"

.PP
Returns the transport macroscopic cross-section for the material at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the transport macroscopic cross-section $ (cm^{-1}) $ 
.RE
.PP

.SS "float Material::getTransportMicroXS (floatenergy)"

.PP
Returns the total microscopic transport cross-section for the material at some energy (eV) \fBParameters:\fP
.RS 4
\fIenergy\fP the energy of interest (eV) 
.RE
.PP
\fBReturns:\fP
.RS 4
the total microscopic transport cross-section 
.RE
.PP

.SS "float Material::getTransportMicroXS (intenergy_index)"

.PP
Returns the transport microscopic cross-section for the material at some index into the uniform lethargy grid\&. \fBParameters:\fP
.RS 4
\fIenergy_index\fP the index into the uniform lethargy grid 
.RE
.PP
\fBReturns:\fP
.RS 4
the transport microscopic cross-section 
.RE
.PP

.SS "float Material::getVolume ()"

.PP
Returns the total volume of all regions containing this material\&. \fBReturns:\fP
.RS 4
the total volume defined by this material 
.RE
.PP

.SS "void Material::incrementVolume (floatvolume)"

.PP
Increments the volume occupied by this material in the geometry\&. This is used when a material is added to more than one region, as is the case for a heterogeneous pin cell with multiple radial regions of the same material\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvolume\fP the volume to add to the total material volume 
.RE
.PP

.SS "void Material::retrieveXS (float *xs, intnum_xs, char *xs_type)"

.PP
Fills an array with macroscopic cross-section values\&. This method is a helper function to allow PINSPEC users to get access to the material's nuclear data in Python\&. A user must initialize a numpy array of the correct size (ie, a float64 array the length of the number of cross-section values) as input to this function\&. This function then fills the numpy array with the data values for one of the isotope's cross-sections\&. An example of how this function might be called in Python is as follows:
.PP
.PP
.nf
num_xs = material\&.getNumXSEnergies()
xs = numpy\&.zeros(num_xs)          
material\&.retrieveXS(xs, num_xs, 'capture')
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIxs\fP an array to fill with the macroscopic cross-section data 
.br
\fInum_xs\fP the number of cross-section values 
.br
\fIxs_type\fP the type of cross-section 
.RE
.PP

.SS "void Material::retrieveXSEnergies (float *energies, intnum_xs, char *xs_type)"

.PP
Fills an array with cross-section energy values\&. This method is a helper function to allow PINSPEC users to get access to the material's nuclear data in Python\&. A user must initialize a numpy array of the correct size (ie, a float64 array the length of the number of cross-section values) as input to this function\&. This function then fills the numpy array with the energy values for the isotope's cross-section data\&. An example of how this function might be called in Python is as follows:
.PP
.PP
.nf
num_energies = material\&.getNumXSEnergies()
energies = numpy\&.zeros(num_energies)          
material\&.retrieveXSEnergies(energies, num_energies, 'capture')
.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIenergies\fP an array to fill with the cross-section energies 
.br
\fInum_xs\fP the number of cross-section values 
.br
\fIxs_type\fP the type of cross-section 
.RE
.PP

.SS "void Material::sampleIsotope (\fBneutron\fP *neutron)"

.PP
Samples an isotope for a collision\&. The probability for collision with an isotope isbased on the ratios of each isotope's total cross-section to the total cross-section of all isotope's in this \fBMaterial\fP\&. 
.PP
\fBReturns:\fP
.RS 4
a pointer to the sampled isotope 
.RE
.PP

.SS "void Material::setAtomicMass (floatatomic_mass)"

.PP
Sets the material's total atomic mass\&. If the material is a molecule this is equivalent to setting the molecular mass\&. For example, for UO2, the material atomic mass would be $ 235 + 16 + 16 = 267 $\&. 
.PP
\fBParameters:\fP
.RS 4
\fIatomic_mass\fP the material's total atomic mass 
.RE
.PP

.SS "void Material::setBucklingSquared (floatbuckling_squared)"

.PP
Sets the squared geomtric buckling for the geometry in which this material resides\&. This is used such that leakage can be sampled within isotopes in the same way as all other reaction rates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIbuckling_squared\fP the squared geometric buckling for the geometry 
.RE
.PP

.SS "void Material::setDensity (floatdensity, char *unit)"

.PP
Sets this material's density\&. \fBParameters:\fP
.RS 4
\fIdensity\fP the density of the material 
.br
\fIunit\fP the density units ('g/cc' or 'at/cc') 
.RE
.PP

.SS "void Material::setMaterialName (char *name)"

.PP
Sets the name for the material\&. \fBParameters:\fP
.RS 4
\fIname\fP a character array for the material's name 
.RE
.PP

.SS "void Material::setNumberDensity (floatnumber_density, const char *unit)"

.PP
Sets the material's number density\&. \fBParameters:\fP
.RS 4
\fInumber_density\fP the number density of material (at/cc) 
.br
\fIunit\fP the density units ('g/cc' or 'at/cc') 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "float Material::_buckling_squared\fC [private]\fP"
The geometric buckling squared - used to sample leakage 
.SS "\fBdensityUnit\fP Material::_density_unit\fC [private]\fP"
The units for the material's density (ie, 'g/cc' or 'at/cc') 
.SS "std::map<char*, std::pair<float, \fBIsotope\fP*> > Material::_isotopes\fC [private]\fP"
Map relating isotope name to number density / isotope pairs 
.SS "std::map<\fBIsotope\fP*, float> Material::_isotopes_AO\fC [private]\fP"
Map relating isotope pointers to atomic ratios within the material 
.SS "float Material::_material_atomic_mass\fC [private]\fP"
The material atomic mass (sum of all isotope masses according to their abundance in the material 
.SS "float Material::_material_density\fC [private]\fP"
The material density in g/cc 
.SS "char* Material::_material_name\fC [private]\fP"
The name of the material arbitrarily defined by the user 
.SS "float Material::_material_number_density\fC [private]\fP"
The material number density in num/cc 
.SS "float Material::_volume\fC [private]\fP"
The total volume of all regions containing this material 

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
