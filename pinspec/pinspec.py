# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pinspec', [dirname(__file__)])
        except ImportError:
            import _pinspec
            return _pinspec
        if fp is not None:
            try:
                _mod = imp.load_module('_pinspec', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pinspec = swig_import_helper()
    del swig_import_helper
else:
    import _pinspec
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


INFINITE_HOMOGENEOUS = _pinspec.INFINITE_HOMOGENEOUS
HOMOGENEOUS_EQUIVALENCE = _pinspec.HOMOGENEOUS_EQUIVALENCE
HETEROGENEOUS = _pinspec.HETEROGENEOUS
class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_Geometry
    __del__ = lambda self : None;
    def getName(self): return _pinspec.Geometry_getName(self)
    def getNumNeutronsPerBatch(self): return _pinspec.Geometry_getNumNeutronsPerBatch(self)
    def getTotalNumNeutrons(self): return _pinspec.Geometry_getTotalNumNeutrons(self)
    def getNumBatches(self): return _pinspec.Geometry_getNumBatches(self)
    def getNumThreads(self): return _pinspec.Geometry_getNumThreads(self)
    def getSpatialType(self): return _pinspec.Geometry_getSpatialType(self)
    def getBucklingSquared(self): return _pinspec.Geometry_getBucklingSquared(self)
    def getVolume(self): return _pinspec.Geometry_getVolume(self)
    def getSourceSamplingRadius(self): return _pinspec.Geometry_getSourceSamplingRadius(self)
    def setName(self, *args): return _pinspec.Geometry_setName(self, *args)
    def setSourceSamplingRadius(self, *args): return _pinspec.Geometry_setSourceSamplingRadius(self, *args)
    def setNeutronsPerBatch(self, *args): return _pinspec.Geometry_setNeutronsPerBatch(self, *args)
    def setNumBatches(self, *args): return _pinspec.Geometry_setNumBatches(self, *args)
    def setNumThreads(self, *args): return _pinspec.Geometry_setNumThreads(self, *args)
    def setSpatialType(self, *args): return _pinspec.Geometry_setSpatialType(self, *args)
    def setFuelPinRadius(self, *args): return _pinspec.Geometry_setFuelPinRadius(self, *args)
    def setPinCellPitch(self, *args): return _pinspec.Geometry_setPinCellPitch(self, *args)
    def setDancoffFactor(self, *args): return _pinspec.Geometry_setDancoffFactor(self, *args)
    def addRegion(self, *args): return _pinspec.Geometry_addRegion(self, *args)
    def setBucklingSquared(self, *args): return _pinspec.Geometry_setBucklingSquared(self, *args)
    def contains(self, *args): return _pinspec.Geometry_contains(self, *args)
    def findContainingRegion(self, *args): return _pinspec.Geometry_findContainingRegion(self, *args)
    def runMonteCarloSimulation(self): return _pinspec.Geometry_runMonteCarloSimulation(self)
    def initializeSourceNeutron(self, *args): return _pinspec.Geometry_initializeSourceNeutron(self, *args)
Geometry_swigregister = _pinspec.Geometry_swigregister
Geometry_swigregister(Geometry)

INFINITE_MEDIUM = _pinspec.INFINITE_MEDIUM
EQUIVALENT_FUEL = _pinspec.EQUIVALENT_FUEL
EQUIVALENT_MODERATOR = _pinspec.EQUIVALENT_MODERATOR
BOUNDED_FUEL = _pinspec.BOUNDED_FUEL
BOUNDED_MODERATOR = _pinspec.BOUNDED_MODERATOR
BOUNDED_GENERAL = _pinspec.BOUNDED_GENERAL
class Region(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pinspec.delete_Region
    __del__ = lambda self : None;
    def getName(self): return _pinspec.Region_getName(self)
    def getUid(self): return _pinspec.Region_getUid(self)
    def getMaterial(self): return _pinspec.Region_getMaterial(self)
    def containsIsotope(self, *args): return _pinspec.Region_containsIsotope(self, *args)
    def getRegionType(self): return _pinspec.Region_getRegionType(self)
    def getVolume(self): return _pinspec.Region_getVolume(self)
    def getBucklingSquared(self): return _pinspec.Region_getBucklingSquared(self)
    def getTotalMacroXS(self, *args): return _pinspec.Region_getTotalMacroXS(self, *args)
    def getTotalMicroXS(self, *args): return _pinspec.Region_getTotalMicroXS(self, *args)
    def getElasticMacroXS(self, *args): return _pinspec.Region_getElasticMacroXS(self, *args)
    def getElasticMicroXS(self, *args): return _pinspec.Region_getElasticMicroXS(self, *args)
    def getAbsorptionMacroXS(self, *args): return _pinspec.Region_getAbsorptionMacroXS(self, *args)
    def getAbsorptionMicroXS(self, *args): return _pinspec.Region_getAbsorptionMicroXS(self, *args)
    def getCaptureMacroXS(self, *args): return _pinspec.Region_getCaptureMacroXS(self, *args)
    def getCaptureMicroXS(self, *args): return _pinspec.Region_getCaptureMicroXS(self, *args)
    def getFissionMacroXS(self, *args): return _pinspec.Region_getFissionMacroXS(self, *args)
    def getFissionMicroXS(self, *args): return _pinspec.Region_getFissionMicroXS(self, *args)
    def getTransportMicroXS(self, *args): return _pinspec.Region_getTransportMicroXS(self, *args)
    def getTransportMacroXS(self, *args): return _pinspec.Region_getTransportMacroXS(self, *args)
    def setMaterial(self, *args): return _pinspec.Region_setMaterial(self, *args)
    def setVolume(self, *args): return _pinspec.Region_setVolume(self, *args)
    def setBucklingSquared(self, *args): return _pinspec.Region_setBucklingSquared(self, *args)
    def collideNeutron(self, *args): return _pinspec.Region_collideNeutron(self, *args)
Region_swigregister = _pinspec.Region_swigregister
Region_swigregister(Region)

class InfiniteMediumRegion(Region):
    __swig_setmethods__ = {}
    for _s in [Region]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InfiniteMediumRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [Region]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InfiniteMediumRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_InfiniteMediumRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_InfiniteMediumRegion
    __del__ = lambda self : None;
    def collideNeutron(self, *args): return _pinspec.InfiniteMediumRegion_collideNeutron(self, *args)
InfiniteMediumRegion_swigregister = _pinspec.InfiniteMediumRegion_swigregister
InfiniteMediumRegion_swigregister(InfiniteMediumRegion)

class EquivalenceRegion(Region):
    __swig_setmethods__ = {}
    for _s in [Region]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EquivalenceRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [Region]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EquivalenceRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_EquivalenceRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_EquivalenceRegion
    __del__ = lambda self : None;
    def getFuelPinRadius(self): return _pinspec.EquivalenceRegion_getFuelPinRadius(self)
    def getPinCellPitch(self): return _pinspec.EquivalenceRegion_getPinCellPitch(self)
    def getEnergyGridIndex(self, *args): return _pinspec.EquivalenceRegion_getEnergyGridIndex(self, *args)
    def isFuel(self): return _pinspec.EquivalenceRegion_isFuel(self)
    def isModerator(self): return _pinspec.EquivalenceRegion_isModerator(self)
    def setFirstFlightCollProb(self, *args): return _pinspec.EquivalenceRegion_setFirstFlightCollProb(self, *args)
    def setOtherRegion(self, *args): return _pinspec.EquivalenceRegion_setOtherRegion(self, *args)
    def setFuelPinRadius(self, *args): return _pinspec.EquivalenceRegion_setFuelPinRadius(self, *args)
    def setPinCellPitch(self, *args): return _pinspec.EquivalenceRegion_setPinCellPitch(self, *args)
    def computeFuelFuelCollsionProb(self, *args): return _pinspec.EquivalenceRegion_computeFuelFuelCollsionProb(self, *args)
    def computeModeratorFuelCollisionProb(self, *args): return _pinspec.EquivalenceRegion_computeModeratorFuelCollisionProb(self, *args)
    def collideNeutron(self, *args): return _pinspec.EquivalenceRegion_collideNeutron(self, *args)
EquivalenceRegion_swigregister = _pinspec.EquivalenceRegion_swigregister
EquivalenceRegion_swigregister(EquivalenceRegion)

class EquivalenceFuelRegion(EquivalenceRegion):
    __swig_setmethods__ = {}
    for _s in [EquivalenceRegion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EquivalenceFuelRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [EquivalenceRegion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EquivalenceFuelRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_EquivalenceFuelRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_EquivalenceFuelRegion
    __del__ = lambda self : None;
EquivalenceFuelRegion_swigregister = _pinspec.EquivalenceFuelRegion_swigregister
EquivalenceFuelRegion_swigregister(EquivalenceFuelRegion)

class EquivalenceModeratorRegion(EquivalenceRegion):
    __swig_setmethods__ = {}
    for _s in [EquivalenceRegion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EquivalenceModeratorRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [EquivalenceRegion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EquivalenceModeratorRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_EquivalenceModeratorRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_EquivalenceModeratorRegion
    __del__ = lambda self : None;
EquivalenceModeratorRegion_swigregister = _pinspec.EquivalenceModeratorRegion_swigregister
EquivalenceModeratorRegion_swigregister(EquivalenceModeratorRegion)

class BoundedRegion(Region):
    __swig_setmethods__ = {}
    for _s in [Region]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundedRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [Region]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundedRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_BoundedRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_BoundedRegion
    __del__ = lambda self : None;
    def addBoundingSurface(self, *args): return _pinspec.BoundedRegion_addBoundingSurface(self, *args)
    def removeBoundingSurface(self, *args): return _pinspec.BoundedRegion_removeBoundingSurface(self, *args)
    def contains(self, *args): return _pinspec.BoundedRegion_contains(self, *args)
    def onBoundary(self, *args): return _pinspec.BoundedRegion_onBoundary(self, *args)
    def computeDistanceToSurface(self, *args): return _pinspec.BoundedRegion_computeDistanceToSurface(self, *args)
    def collideNeutron(self, *args): return _pinspec.BoundedRegion_collideNeutron(self, *args)
BoundedRegion_swigregister = _pinspec.BoundedRegion_swigregister
BoundedRegion_swigregister(BoundedRegion)

class BoundedFuelRegion(BoundedRegion):
    __swig_setmethods__ = {}
    for _s in [BoundedRegion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundedFuelRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundedRegion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundedFuelRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_BoundedFuelRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_BoundedFuelRegion
    __del__ = lambda self : None;
    def ringify(self, *args): return _pinspec.BoundedFuelRegion_ringify(self, *args)
BoundedFuelRegion_swigregister = _pinspec.BoundedFuelRegion_swigregister
BoundedFuelRegion_swigregister(BoundedFuelRegion)

class BoundedModeratorRegion(BoundedRegion):
    __swig_setmethods__ = {}
    for _s in [BoundedRegion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundedModeratorRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundedRegion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundedModeratorRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_BoundedModeratorRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_BoundedModeratorRegion
    __del__ = lambda self : None;
    def ringify(self, *args): return _pinspec.BoundedModeratorRegion_ringify(self, *args)
BoundedModeratorRegion_swigregister = _pinspec.BoundedModeratorRegion_swigregister
BoundedModeratorRegion_swigregister(BoundedModeratorRegion)

class BoundedGeneralRegion(BoundedRegion):
    __swig_setmethods__ = {}
    for _s in [BoundedRegion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundedGeneralRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundedRegion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundedGeneralRegion, name)
    __repr__ = _swig_repr
    def __init__(self, region_name = ""): 
        this = _pinspec.new_BoundedGeneralRegion(region_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_BoundedGeneralRegion
    __del__ = lambda self : None;
BoundedGeneralRegion_swigregister = _pinspec.BoundedGeneralRegion_swigregister
BoundedGeneralRegion_swigregister(BoundedGeneralRegion)

PI_OVER_TWO = _pinspec.PI_OVER_TWO
THREE_PI_OVER_TWO = _pinspec.THREE_PI_OVER_TWO
TWO_PI = _pinspec.TWO_PI
TINY_MOVE = _pinspec.TINY_MOVE
XPLANE = _pinspec.XPLANE
YPLANE = _pinspec.YPLANE
ZCYLINDER = _pinspec.ZCYLINDER
REFLECTIVE = _pinspec.REFLECTIVE
VACUUM = _pinspec.VACUUM
INTERFACE = _pinspec.INTERFACE
class Surface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Surface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Surface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pinspec.delete_Surface
    __del__ = lambda self : None;
    def getSurfaceName(self): return _pinspec.Surface_getSurfaceName(self)
    def getUid(self): return _pinspec.Surface_getUid(self)
    def getBoundaryType(self): return _pinspec.Surface_getBoundaryType(self)
    def getSurfaceType(self): return _pinspec.Surface_getSurfaceType(self)
    def setBoundaryType(self, *args): return _pinspec.Surface_setBoundaryType(self, *args)
    def evaluate(self, *args): return _pinspec.Surface_evaluate(self, *args)
    def computeNearestDistance(self, *args): return _pinspec.Surface_computeNearestDistance(self, *args)
    def onSurface(self, *args): return _pinspec.Surface_onSurface(self, *args)
    def reflectNeutron(self, *args): return _pinspec.Surface_reflectNeutron(self, *args)
Surface_swigregister = _pinspec.Surface_swigregister
Surface_swigregister(Surface)

class XPlane(Surface):
    __swig_setmethods__ = {}
    for _s in [Surface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Surface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, XPlane, name)
    __repr__ = _swig_repr
    def __init__(self, surface_name = ""): 
        this = _pinspec.new_XPlane(surface_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_XPlane
    __del__ = lambda self : None;
    def getX(self): return _pinspec.XPlane_getX(self)
    def setX(self, *args): return _pinspec.XPlane_setX(self, *args)
    def evaluate(self, *args): return _pinspec.XPlane_evaluate(self, *args)
    def computeNearestDistance(self, *args): return _pinspec.XPlane_computeNearestDistance(self, *args)
    def onSurface(self, *args): return _pinspec.XPlane_onSurface(self, *args)
    def reflectNeutron(self, *args): return _pinspec.XPlane_reflectNeutron(self, *args)
XPlane_swigregister = _pinspec.XPlane_swigregister
XPlane_swigregister(XPlane)

class YPlane(Surface):
    __swig_setmethods__ = {}
    for _s in [Surface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YPlane, name, value)
    __swig_getmethods__ = {}
    for _s in [Surface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, YPlane, name)
    __repr__ = _swig_repr
    def __init__(self, surface_name = ""): 
        this = _pinspec.new_YPlane(surface_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_YPlane
    __del__ = lambda self : None;
    def getY(self): return _pinspec.YPlane_getY(self)
    def setY(self, *args): return _pinspec.YPlane_setY(self, *args)
    def evaluate(self, *args): return _pinspec.YPlane_evaluate(self, *args)
    def computeNearestDistance(self, *args): return _pinspec.YPlane_computeNearestDistance(self, *args)
    def onSurface(self, *args): return _pinspec.YPlane_onSurface(self, *args)
    def reflectNeutron(self, *args): return _pinspec.YPlane_reflectNeutron(self, *args)
YPlane_swigregister = _pinspec.YPlane_swigregister
YPlane_swigregister(YPlane)

class ZCylinder(Surface):
    __swig_setmethods__ = {}
    for _s in [Surface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [Surface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZCylinder, name)
    __repr__ = _swig_repr
    def __init__(self, surface_name = ""): 
        this = _pinspec.new_ZCylinder(surface_name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_ZCylinder
    __del__ = lambda self : None;
    def getX0(self): return _pinspec.ZCylinder_getX0(self)
    def getY0(self): return _pinspec.ZCylinder_getY0(self)
    def getRadius(self): return _pinspec.ZCylinder_getRadius(self)
    def setX0(self, *args): return _pinspec.ZCylinder_setX0(self, *args)
    def setY0(self, *args): return _pinspec.ZCylinder_setY0(self, *args)
    def setRadius(self, *args): return _pinspec.ZCylinder_setRadius(self, *args)
    def evaluate(self, *args): return _pinspec.ZCylinder_evaluate(self, *args)
    def computeNearestDistance(self, *args): return _pinspec.ZCylinder_computeNearestDistance(self, *args)
    def onSurface(self, *args): return _pinspec.ZCylinder_onSurface(self, *args)
    def reflectNeutron(self, *args): return _pinspec.ZCylinder_reflectNeutron(self, *args)
ZCylinder_swigregister = _pinspec.ZCylinder_swigregister
ZCylinder_swigregister(ZCylinder)

class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_Isotope(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_Isotope
    __del__ = lambda self : None;
    def parseName(self): return _pinspec.Isotope_parseName(self)
    def makeFissionable(self): return _pinspec.Isotope_makeFissionable(self)
    def getIsotopeName(self): return _pinspec.Isotope_getIsotopeName(self)
    def getUid(self): return _pinspec.Isotope_getUid(self)
    def getA(self): return _pinspec.Isotope_getA(self)
    def getAlpha(self): return _pinspec.Isotope_getAlpha(self)
    def getTemperature(self): return _pinspec.Isotope_getTemperature(self)
    def getMuAverage(self): return _pinspec.Isotope_getMuAverage(self)
    def isFissionable(self): return _pinspec.Isotope_isFissionable(self)
    def getThermalScatteringCutoff(self): return _pinspec.Isotope_getThermalScatteringCutoff(self)
    def getNumXSEnergies(self, *args): return _pinspec.Isotope_getNumXSEnergies(self, *args)
    def getElasticXS(self, *args): return _pinspec.Isotope_getElasticXS(self, *args)
    def getAbsorptionXS(self, *args): return _pinspec.Isotope_getAbsorptionXS(self, *args)
    def getCaptureXS(self, *args): return _pinspec.Isotope_getCaptureXS(self, *args)
    def getFissionXS(self, *args): return _pinspec.Isotope_getFissionXS(self, *args)
    def getTotalXS(self, *args): return _pinspec.Isotope_getTotalXS(self, *args)
    def getTransportXS(self, *args): return _pinspec.Isotope_getTransportXS(self, *args)
    def usesThermalScattering(self): return _pinspec.Isotope_usesThermalScattering(self)
    def isRescaled(self): return _pinspec.Isotope_isRescaled(self)
    def getEnergyGridIndex(self, *args): return _pinspec.Isotope_getEnergyGridIndex(self, *args)
    def retrieveXSEnergies(self, *args): return _pinspec.Isotope_retrieveXSEnergies(self, *args)
    def retrieveXS(self, *args): return _pinspec.Isotope_retrieveXS(self, *args)
    def setElasticXS(self, *args): return _pinspec.Isotope_setElasticXS(self, *args)
    def setCaptureXS(self, *args): return _pinspec.Isotope_setCaptureXS(self, *args)
    def setFissionXS(self, *args): return _pinspec.Isotope_setFissionXS(self, *args)
    def setMultigroupElasticXS(self, *args): return _pinspec.Isotope_setMultigroupElasticXS(self, *args)
    def setMultigroupCaptureXS(self, *args): return _pinspec.Isotope_setMultigroupCaptureXS(self, *args)
    def setMultigroupFissionXS(self, *args): return _pinspec.Isotope_setMultigroupFissionXS(self, *args)
    def loadXS(self, *args): return _pinspec.Isotope_loadXS(self, *args)
    def setA(self, *args): return _pinspec.Isotope_setA(self, *args)
    def setTemperature(self, *args): return _pinspec.Isotope_setTemperature(self, *args)
    def neglectThermalScattering(self): return _pinspec.Isotope_neglectThermalScattering(self)
    def setThermalScatteringCutoff(self, *args): return _pinspec.Isotope_setThermalScatteringCutoff(self, *args)
    def useThermalScattering(self): return _pinspec.Isotope_useThermalScattering(self)
    def clone(self): return _pinspec.Isotope_clone(self)
    def sampleCollisionType(self, *args): return _pinspec.Isotope_sampleCollisionType(self, *args)
    def getDistanceTraveled(self, *args): return _pinspec.Isotope_getDistanceTraveled(self, *args)
    def collideNeutron(self, *args): return _pinspec.Isotope_collideNeutron(self, *args)
    def getThermalScatteringEnergy(self, *args): return _pinspec.Isotope_getThermalScatteringEnergy(self, *args)
    def getNumThermalCDFs(self): return _pinspec.Isotope_getNumThermalCDFs(self)
    def getNumThermalCDFBins(self): return _pinspec.Isotope_getNumThermalCDFBins(self)
    def retrieveThermalCDFs(self, *args): return _pinspec.Isotope_retrieveThermalCDFs(self, *args)
    def retrieveThermalPDFs(self, *args): return _pinspec.Isotope_retrieveThermalPDFs(self, *args)
    def retrieveEtokT(self, *args): return _pinspec.Isotope_retrieveEtokT(self, *args)
    def retrieveEprimeToE(self, *args): return _pinspec.Isotope_retrieveEprimeToE(self, *args)
Isotope_swigregister = _pinspec.Isotope_swigregister
Isotope_swigregister(Isotope)

GRAM_CM3 = _pinspec.GRAM_CM3
NUM_CM3 = _pinspec.NUM_CM3
class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_Material(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_Material
    __del__ = lambda self : None;
    def getMaterialName(self): return _pinspec.Material_getMaterialName(self)
    def getUid(self): return _pinspec.Material_getUid(self)
    def getMaterialNumberDensity(self): return _pinspec.Material_getMaterialNumberDensity(self)
    def getIsotope(self, *args): return _pinspec.Material_getIsotope(self, *args)
    def getDensity(self): return _pinspec.Material_getDensity(self)
    def getIsotopeNumDensity(self, *args): return _pinspec.Material_getIsotopeNumDensity(self, *args)
    def containsIsotope(self, *args): return _pinspec.Material_containsIsotope(self, *args)
    def getBucklingSquared(self): return _pinspec.Material_getBucklingSquared(self)
    def getVolume(self): return _pinspec.Material_getVolume(self)
    def getNumXSEnergies(self, *args): return _pinspec.Material_getNumXSEnergies(self, *args)
    def getTotalMacroXS(self, *args): return _pinspec.Material_getTotalMacroXS(self, *args)
    def getTotalMicroXS(self, *args): return _pinspec.Material_getTotalMicroXS(self, *args)
    def getElasticMacroXS(self, *args): return _pinspec.Material_getElasticMacroXS(self, *args)
    def getElasticMicroXS(self, *args): return _pinspec.Material_getElasticMicroXS(self, *args)
    def getAbsorptionMacroXS(self, *args): return _pinspec.Material_getAbsorptionMacroXS(self, *args)
    def getAbsorptionMicroXS(self, *args): return _pinspec.Material_getAbsorptionMicroXS(self, *args)
    def getCaptureMacroXS(self, *args): return _pinspec.Material_getCaptureMacroXS(self, *args)
    def getCaptureMicroXS(self, *args): return _pinspec.Material_getCaptureMicroXS(self, *args)
    def getFissionMacroXS(self, *args): return _pinspec.Material_getFissionMacroXS(self, *args)
    def getFissionMicroXS(self, *args): return _pinspec.Material_getFissionMicroXS(self, *args)
    def getTransportMicroXS(self, *args): return _pinspec.Material_getTransportMicroXS(self, *args)
    def getTransportMacroXS(self, *args): return _pinspec.Material_getTransportMacroXS(self, *args)
    def retrieveXSEnergies(self, *args): return _pinspec.Material_retrieveXSEnergies(self, *args)
    def retrieveXS(self, *args): return _pinspec.Material_retrieveXS(self, *args)
    def setMaterialName(self, *args): return _pinspec.Material_setMaterialName(self, *args)
    def setDensity(self, *args): return _pinspec.Material_setDensity(self, *args)
    def setNumberDensity(self, *args): return _pinspec.Material_setNumberDensity(self, *args)
    def setAtomicMass(self, *args): return _pinspec.Material_setAtomicMass(self, *args)
    def setBucklingSquared(self, *args): return _pinspec.Material_setBucklingSquared(self, *args)
    def incrementVolume(self, *args): return _pinspec.Material_incrementVolume(self, *args)
    def addIsotope(self, *args): return _pinspec.Material_addIsotope(self, *args)
    def clone(self): return _pinspec.Material_clone(self)
    def sampleDistanceTraveled(self, *args): return _pinspec.Material_sampleDistanceTraveled(self, *args)
    def sampleIsotope(self, *args): return _pinspec.Material_sampleIsotope(self, *args)
    def collideNeutron(self, *args): return _pinspec.Material_collideNeutron(self, *args)
Material_swigregister = _pinspec.Material_swigregister
Material_swigregister(Material)

NEUTRON_MASS = _pinspec.NEUTRON_MASS
LIGHT_SPEED = _pinspec.LIGHT_SPEED
MATERIAL = _pinspec.MATERIAL
ISOTOPE = _pinspec.ISOTOPE
REGION = _pinspec.REGION
GEOMETRY = _pinspec.GEOMETRY
UNDEFINED = _pinspec.UNDEFINED
VARIANCE = _pinspec.VARIANCE
STANDARD_DEVIATION = _pinspec.STANDARD_DEVIATION
RELATIVE_ERROR = _pinspec.RELATIVE_ERROR
NONE = _pinspec.NONE
FLUX = _pinspec.FLUX
LEAKAGE_RATE = _pinspec.LEAKAGE_RATE
COLLISION_RATE = _pinspec.COLLISION_RATE
INTERCOLLISION_TIME = _pinspec.INTERCOLLISION_TIME
ELASTIC_RATE = _pinspec.ELASTIC_RATE
GROUP_TO_GROUP_RATE = _pinspec.GROUP_TO_GROUP_RATE
OUTSCATTER_RATE = _pinspec.OUTSCATTER_RATE
ABSORPTION_RATE = _pinspec.ABSORPTION_RATE
CAPTURE_RATE = _pinspec.CAPTURE_RATE
FISSION_RATE = _pinspec.FISSION_RATE
TRANSPORT_RATE = _pinspec.TRANSPORT_RATE
DIFFUSION_RATE = _pinspec.DIFFUSION_RATE
DERIVED = _pinspec.DERIVED
EQUAL = _pinspec.EQUAL
LOGARITHMIC = _pinspec.LOGARITHMIC
OTHER = _pinspec.OTHER
class Tally(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tally, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tally, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pinspec.delete_Tally
    __del__ = lambda self : None;
    def getTallyName(self): return _pinspec.Tally_getTallyName(self)
    def getNumBins(self): return _pinspec.Tally_getNumBins(self)
    def getBinEdges(self): return _pinspec.Tally_getBinEdges(self)
    def getBinCenters(self): return _pinspec.Tally_getBinCenters(self)
    def getBinDelta(self, *args): return _pinspec.Tally_getBinDelta(self, *args)
    def getBinSpacingType(self): return _pinspec.Tally_getBinSpacingType(self)
    def getTallyDomainType(self): return _pinspec.Tally_getTallyDomainType(self)
    def getTallyType(self): return _pinspec.Tally_getTallyType(self)
    def getTallies(self): return _pinspec.Tally_getTallies(self)
    def getTally(self, *args): return _pinspec.Tally_getTally(self, *args)
    def getMaxTally(self): return _pinspec.Tally_getMaxTally(self)
    def getMinTally(self): return _pinspec.Tally_getMinTally(self)
    def getBinIndex(self, *args): return _pinspec.Tally_getBinIndex(self, *args)
    def getMaxMu(self): return _pinspec.Tally_getMaxMu(self)
    def getMaxVariance(self): return _pinspec.Tally_getMaxVariance(self)
    def getMaxStdDev(self): return _pinspec.Tally_getMaxStdDev(self)
    def getMaxRelErr(self): return _pinspec.Tally_getMaxRelErr(self)
    def getTriggerPrecision(self): return _pinspec.Tally_getTriggerPrecision(self)
    def getTriggerType(self): return _pinspec.Tally_getTriggerType(self)
    def hasComputedBatchStatistics(self): return _pinspec.Tally_hasComputedBatchStatistics(self)
    def retrieveTallyEdges(self, *args): return _pinspec.Tally_retrieveTallyEdges(self, *args)
    def retrieveTallyCenters(self, *args): return _pinspec.Tally_retrieveTallyCenters(self, *args)
    def retrieveTallyMu(self, *args): return _pinspec.Tally_retrieveTallyMu(self, *args)
    def retrieveTallyVariance(self, *args): return _pinspec.Tally_retrieveTallyVariance(self, *args)
    def retrieveTallyStdDev(self, *args): return _pinspec.Tally_retrieveTallyStdDev(self, *args)
    def retrieveTallyRelErr(self, *args): return _pinspec.Tally_retrieveTallyRelErr(self, *args)
    def getNumBatches(self): return _pinspec.Tally_getNumBatches(self)
    def getBatchMu(self): return _pinspec.Tally_getBatchMu(self)
    def getBatchVariance(self): return _pinspec.Tally_getBatchVariance(self)
    def getBatchStdDev(self): return _pinspec.Tally_getBatchStdDev(self)
    def getBatchRelativeError(self): return _pinspec.Tally_getBatchRelativeError(self)
    def setTallyDomainType(self, *args): return _pinspec.Tally_setTallyDomainType(self, *args)
    def setTallyType(self, *args): return _pinspec.Tally_setTallyType(self, *args)
    def setBinSpacingType(self, *args): return _pinspec.Tally_setBinSpacingType(self, *args)
    def setBinEdges(self, *args): return _pinspec.Tally_setBinEdges(self, *args)
    def setPrecisionTrigger(self, *args): return _pinspec.Tally_setPrecisionTrigger(self, *args)
    def generateBinEdges(self, *args): return _pinspec.Tally_generateBinEdges(self, *args)
    def generateBinCenters(self): return _pinspec.Tally_generateBinCenters(self)
    def setNumBatches(self, *args): return _pinspec.Tally_setNumBatches(self, *args)
    def incrementNumBatches(self, *args): return _pinspec.Tally_incrementNumBatches(self, *args)
    def isPrecisionTriggered(self): return _pinspec.Tally_isPrecisionTriggered(self)
    def computeBatchStatistics(self): return _pinspec.Tally_computeBatchStatistics(self)
    def computeScaledBatchStatistics(self, *args): return _pinspec.Tally_computeScaledBatchStatistics(self, *args)
    def normalizeBatchMu(self): return _pinspec.Tally_normalizeBatchMu(self)
    def outputBatchStatistics(self, *args): return _pinspec.Tally_outputBatchStatistics(self, *args)
    def printTallies(self, uncertainties = False): return _pinspec.Tally_printTallies(self, uncertainties)
    def clone(self): return _pinspec.Tally_clone(self)
    def tallyGroup(self, *args): return _pinspec.Tally_tallyGroup(self, *args)
    def tally(self, *args): return _pinspec.Tally_tally(self, *args)
    def addIntegers(self, *args): return _pinspec.Tally_addIntegers(self, *args)
    def addFloats(self, *args): return _pinspec.Tally_addFloats(self, *args)
    def addDoubles(self, *args): return _pinspec.Tally_addDoubles(self, *args)
    def subtractIntegers(self, *args): return _pinspec.Tally_subtractIntegers(self, *args)
    def subtractFloats(self, *args): return _pinspec.Tally_subtractFloats(self, *args)
    def subtractDoubles(self, *args): return _pinspec.Tally_subtractDoubles(self, *args)
    def multiplyIntegers(self, *args): return _pinspec.Tally_multiplyIntegers(self, *args)
    def multiplyFloats(self, *args): return _pinspec.Tally_multiplyFloats(self, *args)
    def multiplyDoubles(self, *args): return _pinspec.Tally_multiplyDoubles(self, *args)
    def divideIntegers(self, *args): return _pinspec.Tally_divideIntegers(self, *args)
    def divideFloats(self, *args): return _pinspec.Tally_divideFloats(self, *args)
    def divideDoubles(self, *args): return _pinspec.Tally_divideDoubles(self, *args)
    def __add__(self, *args): return _pinspec.Tally___add__(self, *args)
    def __sub__(self, *args): return _pinspec.Tally___sub__(self, *args)
    def __mul__(self, *args): return _pinspec.Tally___mul__(self, *args)
    def __div__(self, *args): return _pinspec.Tally___div__(self, *args)
Tally_swigregister = _pinspec.Tally_swigregister
Tally_swigregister(Tally)

class IsotopeTally(Tally):
    __swig_setmethods__ = {}
    for _s in [Tally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeTally, name, value)
    __swig_getmethods__ = {}
    for _s in [Tally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeTally, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getIsotope(self): return _pinspec.IsotopeTally_getIsotope(self)
    def tally(self, *args): return _pinspec.IsotopeTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeTally
    __del__ = lambda self : None;
IsotopeTally_swigregister = _pinspec.IsotopeTally_swigregister
IsotopeTally_swigregister(IsotopeTally)

class MaterialTally(Tally):
    __swig_setmethods__ = {}
    for _s in [Tally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialTally, name, value)
    __swig_getmethods__ = {}
    for _s in [Tally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialTally, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getMaterial(self): return _pinspec.MaterialTally_getMaterial(self)
    def tally(self, *args): return _pinspec.MaterialTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialTally
    __del__ = lambda self : None;
MaterialTally_swigregister = _pinspec.MaterialTally_swigregister
MaterialTally_swigregister(MaterialTally)

class RegionTally(Tally):
    __swig_setmethods__ = {}
    for _s in [Tally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionTally, name, value)
    __swig_getmethods__ = {}
    for _s in [Tally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionTally, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getRegion(self): return _pinspec.RegionTally_getRegion(self)
    def tally(self, *args): return _pinspec.RegionTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionTally
    __del__ = lambda self : None;
RegionTally_swigregister = _pinspec.RegionTally_swigregister
RegionTally_swigregister(RegionTally)

class GeometryTally(Tally):
    __swig_setmethods__ = {}
    for _s in [Tally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryTally, name, value)
    __swig_getmethods__ = {}
    for _s in [Tally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryTally, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getGeometry(self): return _pinspec.GeometryTally_getGeometry(self)
    def tally(self, *args): return _pinspec.GeometryTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryTally
    __del__ = lambda self : None;
GeometryTally_swigregister = _pinspec.GeometryTally_swigregister
GeometryTally_swigregister(GeometryTally)

class IsotopeCollisionRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeCollisionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeCollisionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeCollisionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeCollisionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeCollisionRateTally
    __del__ = lambda self : None;
IsotopeCollisionRateTally_swigregister = _pinspec.IsotopeCollisionRateTally_swigregister
IsotopeCollisionRateTally_swigregister(IsotopeCollisionRateTally)

class MaterialCollisionRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialCollisionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialCollisionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialCollisionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialCollisionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialCollisionRateTally
    __del__ = lambda self : None;
MaterialCollisionRateTally_swigregister = _pinspec.MaterialCollisionRateTally_swigregister
MaterialCollisionRateTally_swigregister(MaterialCollisionRateTally)

class RegionCollisionRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionCollisionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionCollisionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionCollisionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionCollisionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionCollisionRateTally
    __del__ = lambda self : None;
RegionCollisionRateTally_swigregister = _pinspec.RegionCollisionRateTally_swigregister
RegionCollisionRateTally_swigregister(RegionCollisionRateTally)

class GeometryCollisionRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryCollisionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryCollisionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryCollisionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryCollisionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryCollisionRateTally
    __del__ = lambda self : None;
GeometryCollisionRateTally_swigregister = _pinspec.GeometryCollisionRateTally_swigregister
GeometryCollisionRateTally_swigregister(GeometryCollisionRateTally)

class IsotopeElasticRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeElasticRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeElasticRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeElasticRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeElasticRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeElasticRateTally
    __del__ = lambda self : None;
IsotopeElasticRateTally_swigregister = _pinspec.IsotopeElasticRateTally_swigregister
IsotopeElasticRateTally_swigregister(IsotopeElasticRateTally)

class MaterialElasticRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialElasticRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialElasticRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialElasticRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialElasticRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialElasticRateTally
    __del__ = lambda self : None;
MaterialElasticRateTally_swigregister = _pinspec.MaterialElasticRateTally_swigregister
MaterialElasticRateTally_swigregister(MaterialElasticRateTally)

class RegionElasticRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionElasticRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionElasticRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionElasticRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionElasticRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionElasticRateTally
    __del__ = lambda self : None;
RegionElasticRateTally_swigregister = _pinspec.RegionElasticRateTally_swigregister
RegionElasticRateTally_swigregister(RegionElasticRateTally)

class GeometryElasticRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryElasticRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryElasticRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryElasticRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryElasticRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryElasticRateTally
    __del__ = lambda self : None;
GeometryElasticRateTally_swigregister = _pinspec.GeometryElasticRateTally_swigregister
GeometryElasticRateTally_swigregister(GeometryElasticRateTally)

class IsotopeGroupRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeGroupRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeGroupRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeGroupRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeGroupRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeGroupRateTally
    __del__ = lambda self : None;
IsotopeGroupRateTally_swigregister = _pinspec.IsotopeGroupRateTally_swigregister
IsotopeGroupRateTally_swigregister(IsotopeGroupRateTally)

class MaterialGroupRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialGroupRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialGroupRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialGroupRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialGroupRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialGroupRateTally
    __del__ = lambda self : None;
MaterialGroupRateTally_swigregister = _pinspec.MaterialGroupRateTally_swigregister
MaterialGroupRateTally_swigregister(MaterialGroupRateTally)

class RegionGroupRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionGroupRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionGroupRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionGroupRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionGroupRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionGroupRateTally
    __del__ = lambda self : None;
RegionGroupRateTally_swigregister = _pinspec.RegionGroupRateTally_swigregister
RegionGroupRateTally_swigregister(RegionGroupRateTally)

class GeometryGroupRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryGroupRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryGroupRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryGroupRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryGroupRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryGroupRateTally
    __del__ = lambda self : None;
GeometryGroupRateTally_swigregister = _pinspec.GeometryGroupRateTally_swigregister
GeometryGroupRateTally_swigregister(GeometryGroupRateTally)

class IsotopeOutScatterRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeOutScatterRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeOutScatterRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeOutScatterRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeOutScatterRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeOutScatterRateTally
    __del__ = lambda self : None;
IsotopeOutScatterRateTally_swigregister = _pinspec.IsotopeOutScatterRateTally_swigregister
IsotopeOutScatterRateTally_swigregister(IsotopeOutScatterRateTally)

class MaterialOutScatterRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialOutScatterRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialOutScatterRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialOutScatterRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialOutScatterRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialOutScatterRateTally
    __del__ = lambda self : None;
MaterialOutScatterRateTally_swigregister = _pinspec.MaterialOutScatterRateTally_swigregister
MaterialOutScatterRateTally_swigregister(MaterialOutScatterRateTally)

class RegionOutScatterRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionOutScatterRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionOutScatterRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionOutScatterRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionOutScatterRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionOutScatterRateTally
    __del__ = lambda self : None;
RegionOutScatterRateTally_swigregister = _pinspec.RegionOutScatterRateTally_swigregister
RegionOutScatterRateTally_swigregister(RegionOutScatterRateTally)

class GeometryOutScatterRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryOutScatterRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryOutScatterRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryOutScatterRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryOutScatterRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryOutScatterRateTally
    __del__ = lambda self : None;
GeometryOutScatterRateTally_swigregister = _pinspec.GeometryOutScatterRateTally_swigregister
GeometryOutScatterRateTally_swigregister(GeometryOutScatterRateTally)

class IsotopeAbsorptionRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeAbsorptionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeAbsorptionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeAbsorptionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeAbsorptionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeAbsorptionRateTally
    __del__ = lambda self : None;
IsotopeAbsorptionRateTally_swigregister = _pinspec.IsotopeAbsorptionRateTally_swigregister
IsotopeAbsorptionRateTally_swigregister(IsotopeAbsorptionRateTally)

class MaterialAbsorptionRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialAbsorptionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialAbsorptionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialAbsorptionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialAbsorptionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialAbsorptionRateTally
    __del__ = lambda self : None;
MaterialAbsorptionRateTally_swigregister = _pinspec.MaterialAbsorptionRateTally_swigregister
MaterialAbsorptionRateTally_swigregister(MaterialAbsorptionRateTally)

class RegionAbsorptionRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionAbsorptionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionAbsorptionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionAbsorptionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionAbsorptionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionAbsorptionRateTally
    __del__ = lambda self : None;
RegionAbsorptionRateTally_swigregister = _pinspec.RegionAbsorptionRateTally_swigregister
RegionAbsorptionRateTally_swigregister(RegionAbsorptionRateTally)

class GeometryAbsorptionRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryAbsorptionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryAbsorptionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryAbsorptionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryAbsorptionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryAbsorptionRateTally
    __del__ = lambda self : None;
GeometryAbsorptionRateTally_swigregister = _pinspec.GeometryAbsorptionRateTally_swigregister
GeometryAbsorptionRateTally_swigregister(GeometryAbsorptionRateTally)

class IsotopeCaptureRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeCaptureRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeCaptureRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeCaptureRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeCaptureRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeCaptureRateTally
    __del__ = lambda self : None;
IsotopeCaptureRateTally_swigregister = _pinspec.IsotopeCaptureRateTally_swigregister
IsotopeCaptureRateTally_swigregister(IsotopeCaptureRateTally)

class MaterialCaptureRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialCaptureRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialCaptureRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialCaptureRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialCaptureRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialCaptureRateTally
    __del__ = lambda self : None;
MaterialCaptureRateTally_swigregister = _pinspec.MaterialCaptureRateTally_swigregister
MaterialCaptureRateTally_swigregister(MaterialCaptureRateTally)

class RegionCaptureRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionCaptureRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionCaptureRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionCaptureRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionCaptureRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionCaptureRateTally
    __del__ = lambda self : None;
RegionCaptureRateTally_swigregister = _pinspec.RegionCaptureRateTally_swigregister
RegionCaptureRateTally_swigregister(RegionCaptureRateTally)

class GeometryCaptureRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryCaptureRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryCaptureRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryCaptureRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryCaptureRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryCaptureRateTally
    __del__ = lambda self : None;
GeometryCaptureRateTally_swigregister = _pinspec.GeometryCaptureRateTally_swigregister
GeometryCaptureRateTally_swigregister(GeometryCaptureRateTally)

class IsotopeFissionRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeFissionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeFissionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeFissionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeFissionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeFissionRateTally
    __del__ = lambda self : None;
IsotopeFissionRateTally_swigregister = _pinspec.IsotopeFissionRateTally_swigregister
IsotopeFissionRateTally_swigregister(IsotopeFissionRateTally)

class MaterialFissionRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialFissionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialFissionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialFissionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialFissionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialFissionRateTally
    __del__ = lambda self : None;
MaterialFissionRateTally_swigregister = _pinspec.MaterialFissionRateTally_swigregister
MaterialFissionRateTally_swigregister(MaterialFissionRateTally)

class RegionFissionRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionFissionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionFissionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionFissionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionFissionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionFissionRateTally
    __del__ = lambda self : None;
RegionFissionRateTally_swigregister = _pinspec.RegionFissionRateTally_swigregister
RegionFissionRateTally_swigregister(RegionFissionRateTally)

class GeometryFissionRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryFissionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryFissionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryFissionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryFissionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryFissionRateTally
    __del__ = lambda self : None;
GeometryFissionRateTally_swigregister = _pinspec.GeometryFissionRateTally_swigregister
GeometryFissionRateTally_swigregister(GeometryFissionRateTally)

class IsotopeTransportRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeTransportRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeTransportRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeTransportRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeTransportRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeTransportRateTally
    __del__ = lambda self : None;
IsotopeTransportRateTally_swigregister = _pinspec.IsotopeTransportRateTally_swigregister
IsotopeTransportRateTally_swigregister(IsotopeTransportRateTally)

class MaterialTransportRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialTransportRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialTransportRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialTransportRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialTransportRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialTransportRateTally
    __del__ = lambda self : None;
MaterialTransportRateTally_swigregister = _pinspec.MaterialTransportRateTally_swigregister
MaterialTransportRateTally_swigregister(MaterialTransportRateTally)

class RegionTransportRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionTransportRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionTransportRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionTransportRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionTransportRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionTransportRateTally
    __del__ = lambda self : None;
RegionTransportRateTally_swigregister = _pinspec.RegionTransportRateTally_swigregister
RegionTransportRateTally_swigregister(RegionTransportRateTally)

class GeometryTransportRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryTransportRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryTransportRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryTransportRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryTransportRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryTransportRateTally
    __del__ = lambda self : None;
GeometryTransportRateTally_swigregister = _pinspec.GeometryTransportRateTally_swigregister
GeometryTransportRateTally_swigregister(GeometryTransportRateTally)

class IsotopeDiffusionRateTally(IsotopeTally):
    __swig_setmethods__ = {}
    for _s in [IsotopeTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsotopeDiffusionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [IsotopeTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsotopeDiffusionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_IsotopeDiffusionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.IsotopeDiffusionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_IsotopeDiffusionRateTally
    __del__ = lambda self : None;
IsotopeDiffusionRateTally_swigregister = _pinspec.IsotopeDiffusionRateTally_swigregister
IsotopeDiffusionRateTally_swigregister(IsotopeDiffusionRateTally)

class MaterialDiffusionRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialDiffusionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialDiffusionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialDiffusionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialDiffusionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialDiffusionRateTally
    __del__ = lambda self : None;
MaterialDiffusionRateTally_swigregister = _pinspec.MaterialDiffusionRateTally_swigregister
MaterialDiffusionRateTally_swigregister(MaterialDiffusionRateTally)

class RegionDiffusionRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionDiffusionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionDiffusionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionDiffusionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionDiffusionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionDiffusionRateTally
    __del__ = lambda self : None;
RegionDiffusionRateTally_swigregister = _pinspec.RegionDiffusionRateTally_swigregister
RegionDiffusionRateTally_swigregister(RegionDiffusionRateTally)

class GeometryDiffusionRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryDiffusionRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryDiffusionRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryDiffusionRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryDiffusionRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryDiffusionRateTally
    __del__ = lambda self : None;
GeometryDiffusionRateTally_swigregister = _pinspec.GeometryDiffusionRateTally_swigregister
GeometryDiffusionRateTally_swigregister(GeometryDiffusionRateTally)

class MaterialLeakageRateTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialLeakageRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialLeakageRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialLeakageRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialLeakageRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialLeakageRateTally
    __del__ = lambda self : None;
MaterialLeakageRateTally_swigregister = _pinspec.MaterialLeakageRateTally_swigregister
MaterialLeakageRateTally_swigregister(MaterialLeakageRateTally)

class RegionLeakageRateTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionLeakageRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionLeakageRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionLeakageRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionLeakageRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionLeakageRateTally
    __del__ = lambda self : None;
RegionLeakageRateTally_swigregister = _pinspec.RegionLeakageRateTally_swigregister
RegionLeakageRateTally_swigregister(RegionLeakageRateTally)

class GeometryLeakageRateTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryLeakageRateTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryLeakageRateTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryLeakageRateTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryLeakageRateTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryLeakageRateTally
    __del__ = lambda self : None;
GeometryLeakageRateTally_swigregister = _pinspec.GeometryLeakageRateTally_swigregister
GeometryLeakageRateTally_swigregister(GeometryLeakageRateTally)

class MaterialFluxTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialFluxTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialFluxTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialFluxTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialFluxTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialFluxTally
    __del__ = lambda self : None;
MaterialFluxTally_swigregister = _pinspec.MaterialFluxTally_swigregister
MaterialFluxTally_swigregister(MaterialFluxTally)

class RegionFluxTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionFluxTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionFluxTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionFluxTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionFluxTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionFluxTally
    __del__ = lambda self : None;
RegionFluxTally_swigregister = _pinspec.RegionFluxTally_swigregister
RegionFluxTally_swigregister(RegionFluxTally)

class GeometryFluxTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryFluxTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryFluxTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryFluxTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryFluxTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryFluxTally
    __del__ = lambda self : None;
GeometryFluxTally_swigregister = _pinspec.GeometryFluxTally_swigregister
GeometryFluxTally_swigregister(GeometryFluxTally)

class MaterialInterCollisionTimeTally(MaterialTally):
    __swig_setmethods__ = {}
    for _s in [MaterialTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialInterCollisionTimeTally, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialInterCollisionTimeTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_MaterialInterCollisionTimeTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.MaterialInterCollisionTimeTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_MaterialInterCollisionTimeTally
    __del__ = lambda self : None;
MaterialInterCollisionTimeTally_swigregister = _pinspec.MaterialInterCollisionTimeTally_swigregister
MaterialInterCollisionTimeTally_swigregister(MaterialInterCollisionTimeTally)

class RegionInterCollisionTimeTally(RegionTally):
    __swig_setmethods__ = {}
    for _s in [RegionTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegionInterCollisionTimeTally, name, value)
    __swig_getmethods__ = {}
    for _s in [RegionTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegionInterCollisionTimeTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_RegionInterCollisionTimeTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.RegionInterCollisionTimeTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_RegionInterCollisionTimeTally
    __del__ = lambda self : None;
RegionInterCollisionTimeTally_swigregister = _pinspec.RegionInterCollisionTimeTally_swigregister
RegionInterCollisionTimeTally_swigregister(RegionInterCollisionTimeTally)

class GeometryInterCollisionTimeTally(GeometryTally):
    __swig_setmethods__ = {}
    for _s in [GeometryTally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryInterCollisionTimeTally, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryTally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryInterCollisionTimeTally, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pinspec.new_GeometryInterCollisionTimeTally(*args)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.GeometryInterCollisionTimeTally_tally(self, *args)
    __swig_destroy__ = _pinspec.delete_GeometryInterCollisionTimeTally
    __del__ = lambda self : None;
GeometryInterCollisionTimeTally_swigregister = _pinspec.GeometryInterCollisionTimeTally_swigregister
GeometryInterCollisionTimeTally_swigregister(GeometryInterCollisionTimeTally)

class DerivedTally(Tally):
    __swig_setmethods__ = {}
    for _s in [Tally]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivedTally, name, value)
    __swig_getmethods__ = {}
    for _s in [Tally]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivedTally, name)
    __repr__ = _swig_repr
    def __init__(self, tally_name = ""): 
        this = _pinspec.new_DerivedTally(tally_name)
        try: self.this.append(this)
        except: self.this = this
    def tally(self, *args): return _pinspec.DerivedTally_tally(self, *args)
    def setTallyName(self, *args): return _pinspec.DerivedTally_setTallyName(self, *args)
    def setTallies(self, *args): return _pinspec.DerivedTally_setTallies(self, *args)
    def setBatchMu(self, *args): return _pinspec.DerivedTally_setBatchMu(self, *args)
    def setBatchVariance(self, *args): return _pinspec.DerivedTally_setBatchVariance(self, *args)
    def setBatchStdDev(self, *args): return _pinspec.DerivedTally_setBatchStdDev(self, *args)
    def setBatchRelErr(self, *args): return _pinspec.DerivedTally_setBatchRelErr(self, *args)
    def setComputedBatchStatistics(self, *args): return _pinspec.DerivedTally_setComputedBatchStatistics(self, *args)
    __swig_destroy__ = _pinspec.delete_DerivedTally
    __del__ = lambda self : None;
DerivedTally_swigregister = _pinspec.DerivedTally_swigregister
DerivedTally_swigregister(DerivedTally)

class TallyBank(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TallyBank, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TallyBank, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pinspec.delete_TallyBank
    __del__ = lambda self : None;
    __swig_getmethods__["Get"] = lambda x: _pinspec.TallyBank_Get
    if _newclass:Get = staticmethod(_pinspec.TallyBank_Get)
    def registerTally(self, *args): return _pinspec.TallyBank_registerTally(self, *args)
    def deregisterTally(self, *args): return _pinspec.TallyBank_deregisterTally(self, *args)
    def initializeBatchTallies(self, *args): return _pinspec.TallyBank_initializeBatchTallies(self, *args)
    def isPrecisionTriggered(self): return _pinspec.TallyBank_isPrecisionTriggered(self)
    def incrementNumBatches(self, *args): return _pinspec.TallyBank_incrementNumBatches(self, *args)
    def computeBatchStatistics(self): return _pinspec.TallyBank_computeBatchStatistics(self)
    def computeScaledBatchStatistics(self, *args): return _pinspec.TallyBank_computeScaledBatchStatistics(self, *args)
    def outputBatchStatistics(self): return _pinspec.TallyBank_outputBatchStatistics(self)
    def tally(self, *args): return _pinspec.TallyBank_tally(self, *args)
    def clearTallies(self): return _pinspec.TallyBank_clearTallies(self)
TallyBank_swigregister = _pinspec.TallyBank_swigregister
TallyBank_swigregister(TallyBank)
cvar = _pinspec.cvar

def TallyBank_Get():
  return _pinspec.TallyBank_Get()
TallyBank_Get = _pinspec.TallyBank_Get

class TallyFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TallyFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TallyFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pinspec.delete_TallyFactory
    __del__ = lambda self : None;
    __swig_getmethods__["Get"] = lambda x: _pinspec.TallyFactory_Get
    if _newclass:Get = staticmethod(_pinspec.TallyFactory_Get)
    def createTally(self, *args): return _pinspec.TallyFactory_createTally(self, *args)
TallyFactory_swigregister = _pinspec.TallyFactory_swigregister
TallyFactory_swigregister(TallyFactory)

def TallyFactory_Get():
  return _pinspec.TallyFactory_Get()
TallyFactory_Get = _pinspec.TallyFactory_Get

class neutron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neutron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neutron, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_batch_num"] = _pinspec.neutron__batch_num_set
    __swig_getmethods__["_batch_num"] = _pinspec.neutron__batch_num_get
    if _newclass:_batch_num = _swig_property(_pinspec.neutron__batch_num_get, _pinspec.neutron__batch_num_set)
    __swig_setmethods__["_energy"] = _pinspec.neutron__energy_set
    __swig_getmethods__["_energy"] = _pinspec.neutron__energy_get
    if _newclass:_energy = _swig_property(_pinspec.neutron__energy_get, _pinspec.neutron__energy_set)
    __swig_setmethods__["_old_energy"] = _pinspec.neutron__old_energy_set
    __swig_getmethods__["_old_energy"] = _pinspec.neutron__old_energy_get
    if _newclass:_old_energy = _swig_property(_pinspec.neutron__old_energy_get, _pinspec.neutron__old_energy_set)
    __swig_setmethods__["_collided"] = _pinspec.neutron__collided_set
    __swig_getmethods__["_collided"] = _pinspec.neutron__collided_get
    if _newclass:_collided = _swig_property(_pinspec.neutron__collided_get, _pinspec.neutron__collided_set)
    __swig_setmethods__["_total_xs"] = _pinspec.neutron__total_xs_set
    __swig_getmethods__["_total_xs"] = _pinspec.neutron__total_xs_get
    if _newclass:_total_xs = _swig_property(_pinspec.neutron__total_xs_get, _pinspec.neutron__total_xs_set)
    __swig_setmethods__["_path_length"] = _pinspec.neutron__path_length_set
    __swig_getmethods__["_path_length"] = _pinspec.neutron__path_length_get
    if _newclass:_path_length = _swig_property(_pinspec.neutron__path_length_get, _pinspec.neutron__path_length_set)
    __swig_setmethods__["_alive"] = _pinspec.neutron__alive_set
    __swig_getmethods__["_alive"] = _pinspec.neutron__alive_get
    if _newclass:_alive = _swig_property(_pinspec.neutron__alive_get, _pinspec.neutron__alive_set)
    __swig_setmethods__["_region"] = _pinspec.neutron__region_set
    __swig_getmethods__["_region"] = _pinspec.neutron__region_get
    if _newclass:_region = _swig_property(_pinspec.neutron__region_get, _pinspec.neutron__region_set)
    __swig_setmethods__["_material"] = _pinspec.neutron__material_set
    __swig_getmethods__["_material"] = _pinspec.neutron__material_get
    if _newclass:_material = _swig_property(_pinspec.neutron__material_get, _pinspec.neutron__material_set)
    __swig_setmethods__["_isotope"] = _pinspec.neutron__isotope_set
    __swig_getmethods__["_isotope"] = _pinspec.neutron__isotope_get
    if _newclass:_isotope = _swig_property(_pinspec.neutron__isotope_get, _pinspec.neutron__isotope_set)
    __swig_setmethods__["_x"] = _pinspec.neutron__x_set
    __swig_getmethods__["_x"] = _pinspec.neutron__x_get
    if _newclass:_x = _swig_property(_pinspec.neutron__x_get, _pinspec.neutron__x_set)
    __swig_setmethods__["_y"] = _pinspec.neutron__y_set
    __swig_getmethods__["_y"] = _pinspec.neutron__y_get
    if _newclass:_y = _swig_property(_pinspec.neutron__y_get, _pinspec.neutron__y_set)
    __swig_setmethods__["_z"] = _pinspec.neutron__z_set
    __swig_getmethods__["_z"] = _pinspec.neutron__z_get
    if _newclass:_z = _swig_property(_pinspec.neutron__z_get, _pinspec.neutron__z_set)
    __swig_setmethods__["_u"] = _pinspec.neutron__u_set
    __swig_getmethods__["_u"] = _pinspec.neutron__u_get
    if _newclass:_u = _swig_property(_pinspec.neutron__u_get, _pinspec.neutron__u_set)
    __swig_setmethods__["_v"] = _pinspec.neutron__v_set
    __swig_getmethods__["_v"] = _pinspec.neutron__v_get
    if _newclass:_v = _swig_property(_pinspec.neutron__v_get, _pinspec.neutron__v_set)
    __swig_setmethods__["_w"] = _pinspec.neutron__w_set
    __swig_getmethods__["_w"] = _pinspec.neutron__w_get
    if _newclass:_w = _swig_property(_pinspec.neutron__w_get, _pinspec.neutron__w_set)
    __swig_setmethods__["_mu"] = _pinspec.neutron__mu_set
    __swig_getmethods__["_mu"] = _pinspec.neutron__mu_get
    if _newclass:_mu = _swig_property(_pinspec.neutron__mu_get, _pinspec.neutron__mu_set)
    __swig_setmethods__["_phi"] = _pinspec.neutron__phi_set
    __swig_getmethods__["_phi"] = _pinspec.neutron__phi_get
    if _newclass:_phi = _swig_property(_pinspec.neutron__phi_get, _pinspec.neutron__phi_set)
    __swig_setmethods__["_surface"] = _pinspec.neutron__surface_set
    __swig_getmethods__["_surface"] = _pinspec.neutron__surface_get
    if _newclass:_surface = _swig_property(_pinspec.neutron__surface_get, _pinspec.neutron__surface_set)
    def __init__(self): 
        this = _pinspec.new_neutron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_neutron
    __del__ = lambda self : None;
neutron_swigregister = _pinspec.neutron_swigregister
neutron_swigregister(neutron)


def createNewNeutron():
  return _pinspec.createNewNeutron()
createNewNeutron = _pinspec.createNewNeutron
class Fissioner(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Fissioner, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Fissioner, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pinspec.new_Fissioner()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_Fissioner
    __del__ = lambda self : None;
    def getNumBins(self): return _pinspec.Fissioner_getNumBins(self)
    def setNumBins(self, *args): return _pinspec.Fissioner_setNumBins(self, *args)
    def setEMax(self, *args): return _pinspec.Fissioner_setEMax(self, *args)
    def buildCDF(self): return _pinspec.Fissioner_buildCDF(self)
    def wattSpectrum(self, *args): return _pinspec.Fissioner_wattSpectrum(self, *args)
    def emitNeutronMeV(self): return _pinspec.Fissioner_emitNeutronMeV(self)
    def emitNeutroneV(self): return _pinspec.Fissioner_emitNeutroneV(self)
    def retrieveCDF(self, *args): return _pinspec.Fissioner_retrieveCDF(self, *args)
    def retrieveCDFEnergies(self, *args): return _pinspec.Fissioner_retrieveCDFEnergies(self, *args)
Fissioner_swigregister = _pinspec.Fissioner_swigregister
Fissioner_swigregister(Fissioner)

DEBUG = _pinspec.DEBUG
INFO = _pinspec.INFO
NORMAL = _pinspec.NORMAL
SEPARATOR = _pinspec.SEPARATOR
HEADER = _pinspec.HEADER
TITLE = _pinspec.TITLE
WARNING = _pinspec.WARNING
CRITICAL = _pinspec.CRITICAL
RESULT = _pinspec.RESULT
UNITTEST = _pinspec.UNITTEST
ERROR = _pinspec.ERROR

def set_err(*args):
  return _pinspec.set_err(*args)
set_err = _pinspec.set_err

def setOutputDirectory(*args):
  return _pinspec.setOutputDirectory(*args)
setOutputDirectory = _pinspec.setOutputDirectory

def getOutputDirectory():
  return _pinspec.getOutputDirectory()
getOutputDirectory = _pinspec.getOutputDirectory

def setLogfileName(*args):
  return _pinspec.setLogfileName(*args)
setLogfileName = _pinspec.setLogfileName

def getLogfileName():
  return _pinspec.getLogfileName()
getLogfileName = _pinspec.getLogfileName

def setSeparatorCharacter(*args):
  return _pinspec.setSeparatorCharacter(*args)
setSeparatorCharacter = _pinspec.setSeparatorCharacter

def getSeparatorCharacter():
  return _pinspec.getSeparatorCharacter()
getSeparatorCharacter = _pinspec.getSeparatorCharacter

def setHeaderCharacter(*args):
  return _pinspec.setHeaderCharacter(*args)
setHeaderCharacter = _pinspec.setHeaderCharacter

def getHeaderCharacter():
  return _pinspec.getHeaderCharacter()
getHeaderCharacter = _pinspec.getHeaderCharacter

def setTitleCharacter(*args):
  return _pinspec.setTitleCharacter(*args)
setTitleCharacter = _pinspec.setTitleCharacter

def getTitleCharacter():
  return _pinspec.getTitleCharacter()
getTitleCharacter = _pinspec.getTitleCharacter

def setLineLength(*args):
  return _pinspec.setLineLength(*args)
setLineLength = _pinspec.setLineLength

def get_loglevel():
  return _pinspec.get_loglevel()
get_loglevel = _pinspec.get_loglevel

def log_printf(*args):
  return _pinspec.log_printf(*args)
log_printf = _pinspec.log_printf

def createMultilineMsg(*args):
  return _pinspec.createMultilineMsg(*args)
createMultilineMsg = _pinspec.createMultilineMsg

def setXSLibDirectory(*args):
  return _pinspec.setXSLibDirectory(*args)
setXSLibDirectory = _pinspec.setXSLibDirectory

def getXSLibDirectory():
  return _pinspec.getXSLibDirectory()
getXSLibDirectory = _pinspec.getXSLibDirectory

def restoreXSLibrary():
  return _pinspec.restoreXSLibrary()
restoreXSLibrary = _pinspec.restoreXSLibrary

def parseCrossSections(*args):
  return _pinspec.parseCrossSections(*args)
parseCrossSections = _pinspec.parseCrossSections

def getNumCrossSectionDataPoints(*args):
  return _pinspec.getNumCrossSectionDataPoints(*args)
getNumCrossSectionDataPoints = _pinspec.getNumCrossSectionDataPoints
class Timer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Timer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Timer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pinspec.new_Timer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pinspec.delete_Timer
    __del__ = lambda self : None;
    def start(self): return _pinspec.Timer_start(self)
    def stop(self): return _pinspec.Timer_stop(self)
    def restart(self): return _pinspec.Timer_restart(self)
    def reset(self): return _pinspec.Timer_reset(self)
    def recordSplit(self, *args): return _pinspec.Timer_recordSplit(self, *args)
    def getTime(self): return _pinspec.Timer_getTime(self)
    def diff(self, *args): return _pinspec.Timer_diff(self, *args)
    def printSplits(self): return _pinspec.Timer_printSplits(self)
Timer_swigregister = _pinspec.Timer_swigregister
Timer_swigregister(Timer)

def log_setlevel(*args):
  return _pinspec.log_setlevel(*args)
log_setlevel = _pinspec.log_setlevel

# This file is compatible with both classic and new-style classes.


