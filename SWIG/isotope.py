# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_isotope', [dirname(__file__)])
        except ImportError:
            import _isotope
            return _isotope
        if fp is not None:
            try:
                _mod = imp.load_module('_isotope', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _isotope = swig_import_helper()
    del swig_import_helper
else:
    import _isotope
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ELASTIC = _isotope.ELASTIC
ABSORPTION = _isotope.ABSORPTION
CAPTURE = _isotope.CAPTURE
FISSION = _isotope.FISSION
TOTAL = _isotope.TOTAL
ISOTROPIC_CM = _isotope.ISOTROPIC_CM
ISOTROPIC_LAB = _isotope.ISOTROPIC_LAB
class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _isotope.new_Isotope()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _isotope.delete_Isotope
    __del__ = lambda self : None;
    def getIsotopeType(self): return _isotope.Isotope_getIsotopeType(self)
    def getA(self): return _isotope.Isotope_getA(self)
    def getAlpha(self): return _isotope.Isotope_getAlpha(self)
    def getN(self): return _isotope.Isotope_getN(self)
    def getTemperature(self): return _isotope.Isotope_getTemperature(self)
    def getMuAverage(self): return _isotope.Isotope_getMuAverage(self)
    def isFissionable(self): return _isotope.Isotope_isFissionable(self)
    def getElasticXS(self, *args): return _isotope.Isotope_getElasticXS(self, *args)
    def getElasticAngleType(self): return _isotope.Isotope_getElasticAngleType(self)
    def getAbsorptionXS(self, *args): return _isotope.Isotope_getAbsorptionXS(self, *args)
    def getCaptureXS(self, *args): return _isotope.Isotope_getCaptureXS(self, *args)
    def getFissionXS(self, *args): return _isotope.Isotope_getFissionXS(self, *args)
    def getTotalXS(self, *args): return _isotope.Isotope_getTotalXS(self, *args)
    def getTransportXS(self, *args): return _isotope.Isotope_getTransportXS(self, *args)
    def usesThermalScattering(self): return _isotope.Isotope_usesThermalScattering(self)
    def setIsotopeType(self, *args): return _isotope.Isotope_setIsotopeType(self, *args)
    def setA(self, *args): return _isotope.Isotope_setA(self, *args)
    def setN(self, *args): return _isotope.Isotope_setN(self, *args)
    def setTemperature(self, *args): return _isotope.Isotope_setTemperature(self, *args)
    def makeFissionable(self): return _isotope.Isotope_makeFissionable(self)
    def loadXS(self, *args): return _isotope.Isotope_loadXS(self, *args)
    def setElasticXS(self, *args): return _isotope.Isotope_setElasticXS(self, *args)
    def setElasticAngleType(self, *args): return _isotope.Isotope_setElasticAngleType(self, *args)
    def setAbsorptionXS(self, *args): return _isotope.Isotope_setAbsorptionXS(self, *args)
    def setFissionXS(self, *args): return _isotope.Isotope_setFissionXS(self, *args)
    def generateCaptureXS(self): return _isotope.Isotope_generateCaptureXS(self)
    def rescaleXS(self, *args): return _isotope.Isotope_rescaleXS(self, *args)
    def clone(self): return _isotope.Isotope_clone(self)
    def getCollisionType(self, *args): return _isotope.Isotope_getCollisionType(self, *args)
    def getThermalScatteringEnergy(self, *args): return _isotope.Isotope_getThermalScatteringEnergy(self, *args)
    def initializeThermalScattering(self, *args): return _isotope.Isotope_initializeThermalScattering(self, *args)
    def thermalScatteringProb(self, *args): return _isotope.Isotope_thermalScatteringProb(self, *args)
Isotope_swigregister = _isotope.Isotope_swigregister
Isotope_swigregister(Isotope)

# This file is compatible with both classic and new-style classes.


