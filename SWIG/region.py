# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_region', [dirname(__file__)])
        except ImportError:
            import _region
            return _region
        if fp is not None:
            try:
                _mod = imp.load_module('_region', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _region = swig_import_helper()
    del swig_import_helper
else:
    import _region
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


FUEL = _region.FUEL
MODERATOR = _region.MODERATOR
INFINITE = _region.INFINITE
NONE = _region.NONE
HETEROGENEOUS = _region.HETEROGENEOUS
HOMOGENEOUS = _region.HOMOGENEOUS
class Region(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _region.new_Region()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _region.delete_Region
    __del__ = lambda self : None;
    def getRegionName(self): return _region.Region_getRegionName(self)
    def getVolume(self): return _region.Region_getVolume(self)
    def getMaterial(self): return _region.Region_getMaterial(self)
    def getRegionType(self): return _region.Region_getRegionType(self)
    def getSpatialType(self): return _region.Region_getSpatialType(self)
    def isFuel(self): return _region.Region_isFuel(self)
    def isModerator(self): return _region.Region_isModerator(self)
    def isInfinite(self): return _region.Region_isInfinite(self)
    def getFuelRadius(self): return _region.Region_getFuelRadius(self)
    def getPitch(self): return _region.Region_getPitch(self)
    def setRegionName(self, *args): return _region.Region_setRegionName(self, *args)
    def setVolume(self, *args): return _region.Region_setVolume(self, *args)
    def setMaterial(self, *args): return _region.Region_setMaterial(self, *args)
    def setRegionType(self, *args): return _region.Region_setRegionType(self, *args)
    def setSpatialType(self, *args): return _region.Region_setSpatialType(self, *args)
    def addTally(self, *args): return _region.Region_addTally(self, *args)
    def setTwoRegionPinCellParams(self, *args): return _region.Region_setTwoRegionPinCellParams(self, *args)
    def setFuelRadius(self, *args): return _region.Region_setFuelRadius(self, *args)
    def setPitch(self, *args): return _region.Region_setPitch(self, *args)
    def addFuelRingRadius(self, *args): return _region.Region_addFuelRingRadius(self, *args)
    def addModeratorRingRadius(self, *args): return _region.Region_addModeratorRingRadius(self, *args)
    def computeFuelFuelCollisionProb(self, *args): return _region.Region_computeFuelFuelCollisionProb(self, *args)
    def computeModeratorFuelCollisionProb(self, *args): return _region.Region_computeModeratorFuelCollisionProb(self, *args)
    def clearTallies(self): return _region.Region_clearTallies(self)
    def contains(self, *args): return _region.Region_contains(self, *args)
    def onBoundary(self, *args): return _region.Region_onBoundary(self, *args)
Region_swigregister = _region.Region_swigregister
Region_swigregister(Region)

ELASTIC = _region.ELASTIC
ABSORPTION = _region.ABSORPTION
CAPTURE = _region.CAPTURE
FISSION = _region.FISSION
TOTAL = _region.TOTAL
ISOTROPIC_CM = _region.ISOTROPIC_CM
ISOTROPIC_LAB = _region.ISOTROPIC_LAB
class Isotope(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Isotope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Isotope, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _region.new_Isotope()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _region.delete_Isotope
    __del__ = lambda self : None;
    def getIsotopeType(self): return _region.Isotope_getIsotopeType(self)
    def getA(self): return _region.Isotope_getA(self)
    def getAlpha(self): return _region.Isotope_getAlpha(self)
    def getN(self): return _region.Isotope_getN(self)
    def getTemperature(self): return _region.Isotope_getTemperature(self)
    def getMuAverage(self): return _region.Isotope_getMuAverage(self)
    def isFissionable(self): return _region.Isotope_isFissionable(self)
    def getElasticXS(self, *args): return _region.Isotope_getElasticXS(self, *args)
    def getElasticAngleType(self): return _region.Isotope_getElasticAngleType(self)
    def getAbsorptionXS(self, *args): return _region.Isotope_getAbsorptionXS(self, *args)
    def getCaptureXS(self, *args): return _region.Isotope_getCaptureXS(self, *args)
    def getFissionXS(self, *args): return _region.Isotope_getFissionXS(self, *args)
    def getTotalXS(self, *args): return _region.Isotope_getTotalXS(self, *args)
    def getTransportXS(self, *args): return _region.Isotope_getTransportXS(self, *args)
    def usesThermalScattering(self): return _region.Isotope_usesThermalScattering(self)
    def setIsotopeType(self, *args): return _region.Isotope_setIsotopeType(self, *args)
    def setA(self, *args): return _region.Isotope_setA(self, *args)
    def setN(self, *args): return _region.Isotope_setN(self, *args)
    def setTemperature(self, *args): return _region.Isotope_setTemperature(self, *args)
    def makeFissionable(self): return _region.Isotope_makeFissionable(self)
    def loadXS(self, *args): return _region.Isotope_loadXS(self, *args)
    def setElasticXS(self, *args): return _region.Isotope_setElasticXS(self, *args)
    def setElasticAngleType(self, *args): return _region.Isotope_setElasticAngleType(self, *args)
    def setAbsorptionXS(self, *args): return _region.Isotope_setAbsorptionXS(self, *args)
    def setFissionXS(self, *args): return _region.Isotope_setFissionXS(self, *args)
    def generateCaptureXS(self): return _region.Isotope_generateCaptureXS(self)
    def rescaleXS(self, *args): return _region.Isotope_rescaleXS(self, *args)
    def clone(self): return _region.Isotope_clone(self)
    def getCollisionType(self, *args): return _region.Isotope_getCollisionType(self, *args)
    def getThermalScatteringEnergy(self, *args): return _region.Isotope_getThermalScatteringEnergy(self, *args)
    def initializeThermalScattering(self, *args): return _region.Isotope_initializeThermalScattering(self, *args)
    def thermalScatteringProb(self, *args): return _region.Isotope_thermalScatteringProb(self, *args)
    def addTally(self, *args): return _region.Isotope_addTally(self, *args)
    def clearTallies(self): return _region.Isotope_clearTallies(self)
Isotope_swigregister = _region.Isotope_swigregister
Isotope_swigregister(Isotope)

class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _region.new_Material()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _region.delete_Material
    __del__ = lambda self : None;
    def getMaterialName(self): return _region.Material_getMaterialName(self)
    def getMaterialNumberDensity(self): return _region.Material_getMaterialNumberDensity(self)
    def getIsotope(self, *args): return _region.Material_getIsotope(self, *args)
    def getIsotopeNumDensity(self, *args): return _region.Material_getIsotopeNumDensity(self, *args)
    def getTotalMacroXS(self, *args): return _region.Material_getTotalMacroXS(self, *args)
    def getTotalMicroXS(self, *args): return _region.Material_getTotalMicroXS(self, *args)
    def getElasticMacroXS(self, *args): return _region.Material_getElasticMacroXS(self, *args)
    def getElasticMicroXS(self, *args): return _region.Material_getElasticMicroXS(self, *args)
    def getAbsorptionMacroXS(self, *args): return _region.Material_getAbsorptionMacroXS(self, *args)
    def getAbsorptionMicroXS(self, *args): return _region.Material_getAbsorptionMicroXS(self, *args)
    def getCaptureMacroXS(self, *args): return _region.Material_getCaptureMacroXS(self, *args)
    def getCaptureMicroXS(self, *args): return _region.Material_getCaptureMicroXS(self, *args)
    def getFissionMacroXS(self, *args): return _region.Material_getFissionMacroXS(self, *args)
    def getFissionMicroXS(self, *args): return _region.Material_getFissionMicroXS(self, *args)
    def getTransportMicroXS(self, *args): return _region.Material_getTransportMicroXS(self, *args)
    def getTransportMacroXS(self, *args): return _region.Material_getTransportMacroXS(self, *args)
    def isRescaled(self): return _region.Material_isRescaled(self)
    def getEnergyGridIndex(self, *args): return _region.Material_getEnergyGridIndex(self, *args)
    def setMaterialName(self, *args): return _region.Material_setMaterialName(self, *args)
    def setDensity(self, *args): return _region.Material_setDensity(self, *args)
    def addIsotope(self, *args): return _region.Material_addIsotope(self, *args)
    def complete(self): return _region.Material_complete(self)
    def rescaleCrossSections(self, *args): return _region.Material_rescaleCrossSections(self, *args)
    def sampleIsotope(self, *args): return _region.Material_sampleIsotope(self, *args)
    def addTally(self, *args): return _region.Material_addTally(self, *args)
    def clearTallies(self): return _region.Material_clearTallies(self)
Material_swigregister = _region.Material_swigregister
Material_swigregister(Material)

EQUAL = _region.EQUAL
LOGARITHMIC = _region.LOGARITHMIC
OTHER = _region.OTHER
MATERIAL = _region.MATERIAL
ISOTOPE = _region.ISOTOPE
REGION = _region.REGION
FLUX = _region.FLUX
COLLISION_RATE = _region.COLLISION_RATE
ELASTIC_RATE = _region.ELASTIC_RATE
ABSORPTION_RATE = _region.ABSORPTION_RATE
CAPTURE_RATE = _region.CAPTURE_RATE
FISSION_RATE = _region.FISSION_RATE
TRANSPORT_RATE = _region.TRANSPORT_RATE
DIFFUSION_RATE = _region.DIFFUSION_RATE
LEAKAGE_RATE = _region.LEAKAGE_RATE
class Tally(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tally, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tally, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _region.new_Tally()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _region.delete_Tally
    __del__ = lambda self : None;
    def getTallyName(self): return _region.Tally_getTallyName(self)
    def getNumBins(self): return _region.Tally_getNumBins(self)
    def getBinEdges(self): return _region.Tally_getBinEdges(self)
    def getBinCenters(self): return _region.Tally_getBinCenters(self)
    def getBinDelta(self, *args): return _region.Tally_getBinDelta(self, *args)
    def getBinSpacingType(self): return _region.Tally_getBinSpacingType(self)
    def getTallyDomainType(self): return _region.Tally_getTallyDomainType(self)
    def getTallyType(self): return _region.Tally_getTallyType(self)
    def getTallies(self): return _region.Tally_getTallies(self)
    def getTally(self, *args): return _region.Tally_getTally(self, *args)
    def getNumTallies(self, *args): return _region.Tally_getNumTallies(self, *args)
    def getMaxTally(self): return _region.Tally_getMaxTally(self)
    def getMinTally(self): return _region.Tally_getMinTally(self)
    def getBinIndex(self, *args): return _region.Tally_getBinIndex(self, *args)
    def getNumBatches(self): return _region.Tally_getNumBatches(self)
    def getBatchMu(self): return _region.Tally_getBatchMu(self)
    def getBatchVariance(self): return _region.Tally_getBatchVariance(self)
    def getBatchStdDev(self): return _region.Tally_getBatchStdDev(self)
    def getBatchRelativeError(self): return _region.Tally_getBatchRelativeError(self)
    def setTallyName(self, *args): return _region.Tally_setTallyName(self, *args)
    def setTallyDomainType(self, *args): return _region.Tally_setTallyDomainType(self, *args)
    def setTallyType(self, *args): return _region.Tally_setTallyType(self, *args)
    def setBinEdges(self, *args): return _region.Tally_setBinEdges(self, *args)
    def generateBinEdges(self, *args): return _region.Tally_generateBinEdges(self, *args)
    def setNumBatches(self, *args): return _region.Tally_setNumBatches(self, *args)
    def generateBinCenters(self): return _region.Tally_generateBinCenters(self)
    def tally(self, *args): return _region.Tally_tally(self, *args)
    def weightedTally(self, *args): return _region.Tally_weightedTally(self, *args)
    def normalizeTallies(self, *args): return _region.Tally_normalizeTallies(self, *args)
    def computeBatchStatistics(self): return _region.Tally_computeBatchStatistics(self)
    def computeScaledBatchStatistics(self, *args): return _region.Tally_computeScaledBatchStatistics(self, *args)
    def outputBatchStatistics(self, *args): return _region.Tally_outputBatchStatistics(self, *args)
Tally_swigregister = _region.Tally_swigregister
Tally_swigregister(Tally)

class neutron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neutron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neutron, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_x"] = _region.neutron__x_set
    __swig_getmethods__["_x"] = _region.neutron__x_get
    if _newclass:_x = _swig_property(_region.neutron__x_get, _region.neutron__x_set)
    __swig_setmethods__["_y"] = _region.neutron__y_set
    __swig_getmethods__["_y"] = _region.neutron__y_get
    if _newclass:_y = _swig_property(_region.neutron__y_get, _region.neutron__y_set)
    __swig_setmethods__["_z"] = _region.neutron__z_set
    __swig_getmethods__["_z"] = _region.neutron__z_get
    if _newclass:_z = _swig_property(_region.neutron__z_get, _region.neutron__z_set)
    __swig_setmethods__["_mu"] = _region.neutron__mu_set
    __swig_getmethods__["_mu"] = _region.neutron__mu_get
    if _newclass:_mu = _swig_property(_region.neutron__mu_get, _region.neutron__mu_set)
    __swig_setmethods__["_phi"] = _region.neutron__phi_set
    __swig_getmethods__["_phi"] = _region.neutron__phi_get
    if _newclass:_phi = _swig_property(_region.neutron__phi_get, _region.neutron__phi_set)
    __swig_setmethods__["_energy"] = _region.neutron__energy_set
    __swig_getmethods__["_energy"] = _region.neutron__energy_get
    if _newclass:_energy = _swig_property(_region.neutron__energy_get, _region.neutron__energy_set)
    __swig_setmethods__["_weight"] = _region.neutron__weight_set
    __swig_getmethods__["_weight"] = _region.neutron__weight_get
    if _newclass:_weight = _swig_property(_region.neutron__weight_get, _region.neutron__weight_set)
    def __init__(self): 
        this = _region.new_neutron()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _region.delete_neutron
    __del__ = lambda self : None;
neutron_swigregister = _region.neutron_swigregister
neutron_swigregister(neutron)


def initializeNewNeutron():
  return _region.initializeNewNeutron()
initializeNewNeutron = _region.initializeNewNeutron
# This file is compatible with both classic and new-style classes.


